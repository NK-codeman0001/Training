17/02/2023
Q1) Users who are also drivers:
Query= select U.* from users as U join roles as R on U.id=R.users_id where R.roles_id=1 and U.id in (select R.users_id from roles as R where R.roles_id=2);

                  id                  |      name       |         email          |       phone       |    dob     | gender |            created_at            
--------------------------------------+-----------------+------------------------+-------------------+------------+--------+----------------------------------
 1d3aacf7-af6c-11ed-9ed3-1b0367dc8e20 | Mandy Pellett   | mpellett7@ifeng.com    | +351 910 792 5839 | 1998-11-16 | others | 2023-02-18 14:40:40.072974+05:30
 1d3aacf9-af6c-11ed-9ed3-1b0367dc8e20 | Aron Blumer     | ablumer9@narod.ru      | +66 924 962 7757  | 2001-03-25 | male   | 2023-02-18 14:40:40.089682+05:30
 1d3aad00-af6c-11ed-9ed3-1b0367dc8e20 | Cletis Hele     | cheleg@hao123.com      | +86 607 128 8961  | 1993-09-23 | others | 2023-02-18 14:40:40.148171+05:30
 1d3aad01-af6c-11ed-9ed3-1b0367dc8e20 | Rees Tierny     | rtiernyh@dell.com      | +58 639 661 5588  | 2001-08-04 | male   | 2023-02-18 14:40:40.156492+05:30
 1d3aad02-af6c-11ed-9ed3-1b0367dc8e20 | Iormina Clifton | icliftoni@cornell.edu  | +86 982 399 7135  | 1999-02-02 | others | 2023-02-18 14:40:40.164649+05:30
 d4365176-b0e0-11ed-b086-436833f0f540 | Yul Tudor       | ytudor8@guardian.co.uk | +1-704-186-4248   | 1998-10-10 | female | 2023-02-20 11:08:39.857566+05:30
(6 rows)

___________________________________________________________

Q2) Only user gender count:
Query=  select U.gender, Count(*)  from users as U where U.id not in (select R.users_id from roles as R where R.roles_id =2) group by U.gender ;

s1) only users: select U.* from users as U where U.id not in (select R.users_id from roles as R where R.roles_id =2);
s2) gender count of only users: select U.gender, Count(*)  from users as U where U.id not in (select R.users_id from roles as R where R.roles_id =2) group by U.gender ;

 gender | count 
--------+-------
 others |     5
 male   |     4
 female |     4
(3 rows)

___________________________________________________________

Q3) : Cabs in Maximum Categories:
Query= Select C.*,count(C.id) from cabs as C join cab_categories as CC on C.id = CC.cabs_id
group by C.id having count(*)=(select Count(C.cabs_id) from cab_categories as C group by C.cab_types_id order by count(C.cab_types_id) desc limit 1);
                  id                  |              driver_id               |  name   |    reg_no     |  reg_date  | count 
--------------------------------------+--------------------------------------+---------+---------------+------------+-------
 36757f39-b0e3-11ed-b086-436833f0f540 | d4365175-b0e0-11ed-b086-436833f0f540 | Lincoln | PN-22-BF-1292 | 2022-09-27 |     9
 36757f2e-b0e3-11ed-b086-436833f0f540 | 1d3aacfb-af6c-11ed-9ed3-1b0367dc8e20 | Lincoln | PN-02-VS-3222 | 2020-07-22 |     9
(2 rows)
_____________________________________________________


Q4) : Categories having most cabs:
Query= cab_booking_db=# Select C.* from cabs as C join cab_categories as CC on C.id = CC.cabs_id
where 
CC.cab_types_id =(select C.cab_types_id from cab_categories as C group by C.cab_types_id order by count(C.cab_types_id) desc limit 1);
                  id                  |              driver_id               |    name    |    reg_no     |  reg_date  
--------------------------------------+--------------------------------------+------------+---------------+------------
 36757f2e-b0e3-11ed-b086-436833f0f540 | 1d3aacfb-af6c-11ed-9ed3-1b0367dc8e20 | Lincoln    | PN-02-VS-3222 | 2020-07-22
 36757f2f-b0e3-11ed-b086-436833f0f540 | 1d3aacfc-af6c-11ed-9ed3-1b0367dc8e20 | Volkswagen | HR-82-JN-5272 | 2013-02-16
 36757f30-b0e3-11ed-b086-436833f0f540 | 1d3aacfd-af6c-11ed-9ed3-1b0367dc8e20 | Acura      | DL-52-CA-3242 | 2022-08-10
 36757f31-b0e3-11ed-b086-436833f0f540 | 1d3aacfe-af6c-11ed-9ed3-1b0367dc8e20 | Nissan     | HR-02-EO-8242 | 2018-05-20
 36757f33-b0e3-11ed-b086-436833f0f540 | 1d3aad00-af6c-11ed-9ed3-1b0367dc8e20 | Dodge      | PN-52-EA-6232 | 2014-03-10
 36757f34-b0e3-11ed-b086-436833f0f540 | 1d3aad01-af6c-11ed-9ed3-1b0367dc8e20 | GMC        | DL-22-BN-5262 | 2022-12-14
 36757f38-b0e3-11ed-b086-436833f0f540 | d4365174-b0e0-11ed-b086-436833f0f540 | Nissan     | PN-42-HC-8212 | 2012-06-11
 36757f39-b0e3-11ed-b086-436833f0f540 | d4365175-b0e0-11ed-b086-436833f0f540 | Lincoln    | PN-22-BF-1292 | 2022-09-27
 49003bfc-b0e3-11ed-b086-436833f0f540 | 1d3aacfa-af6c-11ed-9ed3-1b0367dc8e20 | Nissan     | UP-02-QF-6242 | 2018-10-11
(9 rows)

___________________________________________________________


Q5) : total good ,bad, and average reviews:
Query= cab_booking_db=# Select category, count(*) from (
select case
when R.value ='4'  or R.value ='5' then 'Good'
when R.value ='3' then 'Average'
else 'Bad'
end
as category
from ratings as R) as A group by A.category;
 category | count 
----------+-------
 Good     |     2
 Average  |     4
 Bad      |     3
(3 rows)

___________________________________________________________


Q6) : Total Cabs and Drivers with Good Ratings and Bad Ratings:
Query= cab_booking_db=# Select C.drivers,Count(C.drivers) from
cab_booking_db-# (
cab_booking_db(# Select case 
when R.value ='1'  or R.value ='2' then 'Bad'
else 'Good'
end
as drivers
from ratings as R) as C group by C.drivers;
 drivers | count 
---------+-------
 Good    |     6
 Bad     |     3
(2 rows)

___________________________________________________________

22/02/2023

Add distance function:
CREATE OR REPLACE FUNCTION calculate_distance(lon1 float, lat1 float, lon2 float, lat2 float, units varchar)
RETURNS float AS $dist$
    DECLARE
        dist float = 0;
        radlat1 float;
        radlat2 float;
        theta float;
        radtheta float;
    BEGIN
        IF lat1 = lat2 OR lon1 = lon2
            THEN RETURN dist;
        ELSE
            radlat1 = pi() * lat1 / 180;
            radlat2 = pi() * lat2 / 180;
            theta = lon1 - lon2;
            radtheta = pi() * theta / 180;
            dist = sin(radlat1) * sin(radlat2) + cos(radlat1) * cos(radlat2) * cos(radtheta);

            IF dist > 1 THEN dist = 1; END IF;

            dist = acos(dist);
            dist = dist * 180 / pi();
            dist = dist * 60 * 1.1515;

            IF units = 'K' THEN dist = dist * 1.609344; END IF;
            IF units = 'N' THEN dist = dist * 0.8684; END IF;

            RETURN dist;
        END IF;
    END;
$dist$ LANGUAGE plpgsql;

////////////////////////////////////////////////////////////////
notes: 
eg 
SELECT calculate_distance(32.9697, -96.80322, 29.46786, -98.53506, 'M');
SELECT calculate_distance(32.9697, -96.80322, 29.46786, -98.53506, 'K');
SELECT calculate_distance(32.9697, -96.80322, 29.46786, -98.53506, 'N');

Passed to function:
lat1, lon1 = Latitude and Longitude of point 1 (in decimal degrees)
lat2, lon2 = Latitude and Longitude of point 2 (in decimal degrees)
unit = the unit you desire for results
where: 'M' is statute miles (default)
'K' is kilometers
'N' is nautical miles


Q1) : find distance of each complete trip:
Query= select B.id,B.customer_id,B.driver_record_id, calculate_distance(B.source[0],B.source[1],B.destination[0],B.destination[1],'K') as distance from bookings as B;
 
___________________________________________________________

Q2) : find per charge of a trip;
Query= select B.id, CT.per_charge from bookings as B join drivers_records as DR on B.driver_record_id = DR.id join cabs as C on DR.cab_id = C.id join cab_types as CT on C.type_id=CT.id;
___________________________________________________________

Q3) : find booking id with actual cost of a trip without extra charges;
Query= select B.id,B.customer_id,B.driver_record_id, calculate_distance(B.source[0],B.source[1],B.destination[0],B.destination[1],'K')*(CT.per_charge) as "Actual Cost", CT.type from bookings as B join drivers_records as DR on B.driver_record_id = DR.id join cabs as C on DR.cab_id = C.id join cab_types as CT on C.type_id=CT.id;

___________________________________________________________
Q4) : find all extra charges of each type;
Query= select CT.type, Sum(OC.charge) from cab_types as CT join other_charges as OC on CT.id = OC.cab_types_id Group by CT.type  ;
___________________________________________________________
Q5) : Customer with most trips;

s1= maximum trip: select Max(T.trips) from (Select B.customer_id,Count(*) as trips from bookings as B where and B.status='completed' group by B.customer_id) as T;
Query = Select C.name from bookings as B join Customers as C on C.id = B.customer_id and B.status='completed' group by C.name having count(*) =(select Max(T.trips) from (Select B.customer_id,Count(*) as trips from bookings as B group by B.customer_id) as T) ;

___________________________________________________________
Q6) : driver with most trips;
s1= maximum trip: select MAX(T.trips) from (Select Count(*) as trips from bookings as B join drivers_records as DR on B.driver_record_id = DR.id and B.status='completed' group by DR.driver_id) as T;
Query = Select D.name from bookings as B join drivers_records as DR on B.driver_record_id = DR.id and B.status='completed' join drivers as D on DR.driver_id =D.id group by D.name having count(*) =(select MAX(T.trips) from (Select Count(*) as trips from bookings as B join drivers_records as DR on B.driver_record_id = DR.id group by DR.driver_id) as T) ;
      name       
-----------------
 Crista Burberye
 Nannie Tansly
(2 rows)

___________________________________________________________
23/02/2023

Q1) : customer who had spent the most;
s1: total spend customer wise:  select B.customer_id,Sum(calculate_distance(B.source[0],B.source[1],B.destination[0],B.destination[1],'K')*(CT.per_charge)) as "Total Spend" from bookings as B join drivers_records as DR on B.driver_record_id = DR.id and B.status='completed' join cabs as C on DR.cab_id = C.id join cab_types as CT on C.type_id=CT.id group by B.customer_id;
s2: find  max : Select Max(T."Total Spend") from (select B.customer_id,Sum(calculate_distance(B.source[0],B.source[1],B.destination[0],B.destination[1],'K')*(CT.per_charge)) as "Total Spend" from bookings as B join drivers_records as DR on B.driver_record_id = DR.id and B.status='completed' join cabs as C on DR.cab_id = C.id join cab_types as CT on C.type_id=CT.id group by B.customer_id) as T;
s4: select cus with max value
Query = select * from (select B.customer_id,Sum(calculate_distance(B.source[0],B.source[1],B.destination[0],B.destination[1],'K')*(CT.per_charge)) as "Total Spend" from bookings as B join drivers_records as DR on B.driver_record_id = DR.id and B.status='completed' join cabs as C on DR.cab_id = C.id join cab_types as CT on C.type_id=CT.id group by B.customer_id) as T1 where T1."Total Spend" = (Select Max(T."Total Spend") from (select B.customer_id,Sum(calculate_distance(B.source[0],B.source[1],B.destination[0],B.destination[1],'K')*(CT.per_charge)) as "Total Spend" from bookings as B join drivers_records as DR on B.driver_record_id = DR.id join cabs as C on DR.cab_id = C.id join cab_types as CT on C.type_id=CT.id group by B.customer_id) as T);
___________________________________________________________
Q2) : driver who had earned the most;
s1) earning per driver: select DR.driver_id, SUM(calculate_distance(B.source[0],B.source[1],B.destination[0],B.destination[1],'K')*(CT.per_charge)) as "Total Earned" from bookings as B join drivers_records as DR on B.driver_record_id = DR.id and B.status='completed' join cabs as C on DR.cab_id = C.id join cab_types as CT on C.type_id=CT.id group by DR.driver_id;
s2) max earning: Select Max(T."Total Earned") from (select DR.driver_id, SUM(calculate_distance(B.source[0],B.source[1],B.destination[0],B.destination[1],'K')*(CT.per_charge)) as "Total Earned" from bookings as B join drivers_records as DR on B.driver_record_id = DR.id and B.status='completed' join cabs as C on DR.cab_id = C.id join cab_types as CT on C.type_id=CT.id group by DR.driver_id) as T;
s3) select driver detail with max earn:
Query = Select D.id, D.name from drivers as D where D.id in(Select T1.driver_id from (select DR.driver_id, SUM(calculate_distance(B.source[0],B.source[1],B.destination[0],B.destination[1],'K')*(CT.per_charge)) as "Total Earned" from bookings as B join drivers_records as DR on B.driver_record_id = DR.id and B.status='completed' join cabs as C on DR.cab_id = C.id join cab_types as CT on C.type_id=CT.id group by DR.driver_id) as T1 where T1."Total Earned" = (Select Max(T."Total Earned") from (select DR.driver_id, SUM(calculate_distance(B.source[0],B.source[1],B.destination[0],B.destination[1],'K')*(CT.per_charge)) as "Total Earned" from bookings as B join drivers_records as DR on B.driver_record_id = DR.id and B.status='completed' join cabs as C on DR.cab_id = C.id join cab_types as CT on C.type_id=CT.id group by DR.driver_id) as T));
___________________________________________________________
Q3) : find booking id with actual cost of a trip with all extra charges; (tough)

s1) cost of each trip: select B.id, calculate_distance(B.source[0],B.source[1],B.destination[0],B.destination[1],'K')*(CT.per_charge) as "Actual Cost", CT.type from bookings as B join drivers_records as DR on B.driver_record_id = DR.id join cabs as C on DR.cab_id = C.id join cab_types as CT on C.type_id=CT.id;

s2) cost of other charges of each type: select CT.type, Sum(OC.charge) from cab_types as CT join other_charges as OC on CT.id = OC.cab_types_id Group by CT.type;

Query = Select T1.id, (T1."Actual Cost" + T2.sum) as "Final Cost"   
from (select B.id, calculate_distance(B.source[0],B.source[1],B.destination[0],B.destination[1],'K')*(CT.per_charge) as "Actual Cost", CT.type from bookings as B join drivers_records as DR on B.driver_record_id = DR.id join cabs as C on DR.cab_id = C.id join cab_types as CT on C.type_id=CT.id) as T1 
join
 (select CT.type, Sum(OC.charge) from cab_types as CT join other_charges as OC on CT.id = OC.cab_types_id Group by CT.type) as T2 
 on T2.type = T1.type
 ;


