---------------------------------------------------------------------
			Active Record Basics
---------------------------------------------------------------------
What is Active Record?

Active Record is the M in MVC - the model - which is the layer of the system responsible for representing business data and logic. Active Record facilitates the creation and use of business objects whose data requires persistent storage to a database. It is an implementation of the Active Record pattern which itself is a description of an 
Object Relational Mapping system.

---------------------------------

The Active Record Pattern

In Active Record, objects carry both persistent data and behavior which operates on that data. Active Record takes the opinion that ensuring data access logic as part of the object will educate users of that object on how to write to and read from the database.
-------------------------------------------------------------

Object Relational Mapping

Object Relational Mapping, commonly referred to as its abbreviation ORM, is a technique that connects the rich objects of an application to tables in a relational database management system. Using ORM, the properties and relationships of the objects in an application can be easily stored and retrieved from a database without writing SQL statements directly and with less overall database access code.
---------------------------------------------------------------

Active Record as an ORM Framework

Active Record gives us several mechanisms, the most important being the ability to:

    Represent models and their data.
    Represent associations between these models.
    Represent inheritance hierarchies through related models.
    Validate models before they get persisted to the database.
    Perform database operations in an object-oriented fashion.
---------------------------------------------------------------

Convention over Configuration in Active Record

When writing applications using other programming languages or frameworks, it may be necessary to write a lot of configuration code. This is particularly true for ORM frameworks in general. However, if you follow the conventions adopted by Rails, you'll need to write very little configuration (in some cases no configuration at all) when creating Active Record models. The idea is that if you configure your applications in the very same way most of the time then this should be the default way. Thus, explicit configuration would be needed only in those cases where you can't follow the standard convention.
---------------------------------------------------------------

Naming Conventions

#By default, Active Record uses some naming conventions to find out how the mapping between models and database tables should be created. 

#Rails will pluralize your class names to find the respective database table.

#So, for a class Book, you should have a database table called books.

#The Rails pluralization mechanisms are very powerful, being capable of pluralizing (and singularizing) both regular and irregular words.

#When using class names composed of two or more words, the model class name should follow the Ruby conventions, using the CamelCase form, while the table name must use the snake_case form.

`````````````````
    Model Class - Singular with the first letter of each word capitalized (e.g., BookClub).
    Database Table - Plural with underscores separating words (e.g., book_clubs).

````````````````

Examples:
_________________________________________
Model / Class		Table / Schema  |
----------------------------------------|
Article			articles	|
LineItem	 	line_items	|
Deer 			deers		|
Mouse 			mice		|
Person 			people		|
________________________________________|

-----------------------------------------------------------------

Schema Conventions

Active Record uses naming conventions for the columns in database tables, depending on the purpose of these columns.

   1. Foreign keys - These fields should be named following the pattern singularized_table_name_id (e.g., item_id, order_id). These are the fields that Active Record will look for when you create associations between your models.
   
   2. Primary keys - By default, Active Record will use an integer column named id as the table's primary key (bigint for PostgreSQL and MySQL, integer for SQLite). When using Active Record Migrations to create your tables, this column will be automatically created.

############### Creating Active Record Models ###############

(1)===> To create Active Record models, subclass the ApplicationRecord class and you're good to go:

class Product < ApplicationRecord
end

##This will create a Product model, mapped to a products table at the database. By doing this you'll also have the ability to map the columns of each row in that table with the attributes of the instances of your model.

(2)===> Overriding the Naming Conventions
class Product < ApplicationRecord
  self.table_name = "my_products"
end

(2.1)===> If you do so, you will have to define manually the class name that is hosting the fixtures (my_products.yml) using the set_fixture_class method in your test definition:

class ProductTest < ActiveSupport::TestCase
  set_fixture_class my_products: Product
  fixtures :my_products
  # ...
end

(3)===> It's also possible to override the column that should be used as the table's primary key using the ActiveRecord::Base.primary_key= method:

class Product < ApplicationRecord
  self.primary_key = "product_id"
end

___________________________________________________________________

############### CRUD: Reading and Writing Data ###############

(1)===> Create
The new method will return a new object while create will return the object and save it to the database.

--------
For example, given a model User with attributes of name and occupation, the create method call will create and save a new record into the database:

user = User.create(name: "David", occupation: "Code Artist")

--------
Using the new method, an object can be instantiated without being saved:

user = User.new
user.name = "David"
user.occupation = "Code Artist"

#A call to user.save will commit the record to the database.

#Finally, if a block is provided, both create and new will yield the new object to that block for initialization:

user = User.new do |u|
  u.name = "David"
  u.occupation = "Code Artist"
end


(2)===> Read
Active Record provides a rich API for accessing data within a database. Below are a few examples of different data access methods provided by Active Record.

# return a collection with all users
users = User.all

# return the first user
user = User.first

# return the first user named David
david = User.find_by(name: 'David')

# find all users named David who are Code Artists and sort by created_at in reverse chronological order
users = User.where(name: 'David', occupation: 'Code Artist').order(created_at: :desc)


(3)===> Update

user = User.find_by(name: 'David')
user.name = 'Dave'
user.save


#A shorthand for this is to use a hash mapping attribute names to the desired value, like so:

user = User.find_by(name: 'David')
user.update(name: 'Dave')

#This is most useful when updating several attributes at once. If, on the other hand, you'd like to update several records in bulk, you may find the update_all class method useful:

User.update_all "max_login_attempts = 3, must_change_password = 'true'"

#This is the same as if you wrote:

User.update(:all, max_login_attempts: 3, must_change_password: true)


(4)===> Delete

user = User.find_by(name: 'David')
user.destroy

#If you'd like to delete several records in bulk, you may use destroy_by or destroy_all method:

# find and delete all users named David
User.destroy_by(name: 'David')

# delete all users
User.destroy_all

___________________________________________________________________

############### Validations ###############
Validation is a very important issue to consider when persisting to the database, so the methods save and update take it into account when running: they return false when validation fails and they don't actually perform any operations on the database. All of these have a bang counterpart (that is, save! and update!), which are stricter in that they raise the exception ActiveRecord::RecordInvalid if validation fails. A quick example to illustrate:

(*)===> 
class User < ApplicationRecord
  validates :name, presence: true
end


(*)===> 
irb> user = User.new
irb> user.save
=> false
irb> user.save!
ActiveRecord::RecordInvalid: Validation failed: Name can't be blank

___________________________________________________________________

############### END ###############

