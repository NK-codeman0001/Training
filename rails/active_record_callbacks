---------------------------------------------------------------------
               			Active Record Callbacks
---------------------------------------------------------------------
Callbacks allow you to trigger logic before or after an alteration of an object's state.
With callbacks it is possible to write code that will run whenever an Active Record object is 
created, 
saved, 
updated, 
deleted, 
validated, or 
loaded from the database.
___________________________________________________________________

############### Callback Registration ###############

(*)===> in model
____________________________________________
class User < ApplicationRecord
  validates :login, :email, presence: true

  before_validation :ensure_login_has_a_value

  private
    def ensure_login_has_a_value
      if login.nil?
        self.login = email unless email.blank?
      end
    end
end
____________________________________________

Explaination:

(*)    validates :login, :email, presence: true is a validation that checks if the login and email attributes are present before saving a record to the database. If either of these attributes are missing, the record will not be saved.

(*)    before_create do is a Rails callback that runs before a record is created in the database.

(*)    self.name = login.capitalize if name.blank? is code that sets the name attribute of a User object to the capitalized version of its login attribute if the name attribute is blank (i.e., it has not been set yet).

In summary, this code ensures that every User record in the database has a login and email attribute, and that every User record also has a name attribute that defaults to the capitalized version of its login attribute if name is not already set. 


OR
____________________________________________
class User < ApplicationRecord
  validates :login, :email, presence: true

  before_create do
    self.name = login.capitalize if name.blank?
  end
end
____________________________________________


(*)===>
____________________________________________
class User < ApplicationRecord
  before_validation :normalize_name, on: :create

  # :on takes an array as well
  after_validation :set_location, on: [ :create, :update ]

  private
    def normalize_name
      self.name = name.downcase.titleize
    end

    def set_location
      self.location = LocationService.query(self)
    end
end
____________________________________________

It includes two callbacks: before_validation and after_validation.

(*) before_validation :normalize_name, on: :create is a callback that runs before validation is performed on a User object. Specifically, it calls the normalize_name method, which downcases the name attribute and capitalizes the first letter of each word in the string using the titleize method. This ensures that the name attribute is consistently formatted before it is validated.

(*) :on => :create means that this callback will only be called when creating a new record in the database.

(*) after_validation :set_location, on: [ :create, :update ] is a callback that runs after validation is performed on a User object. Specifically, it calls the set_location method, which queries a LocationService to get the location of the user based on their IP address or other relevant information. This ensures that the location attribute is set or updated after validation, so it is always up-to-date in the database.

(*) :on => [:create, :update] means that this callback will be called when creating a new record in the database or updating an existing one.

Both of these callbacks are defined as private methods within the User class, which means that they cannot be called from outside the class.

___________________________________________________________________

############# Available Callbacks: Creating an Object #############

(*)===> before_validation

This callback is called before the model is validated, and is used to modify attributes of the model before validation takes place. 
This can be useful, for example, to ensure that certain attributes are always set to a specific value. Here's an example:
____________________________________________
class User < ApplicationRecord
  before_validation :normalize_email

  private

  def normalize_email
    self.email = email.downcase.strip
  end
end
____________________________________________

## In this example, the normalize_email method is called before validation, which ensures that the email attribute is always in lowercase and has no whitespace before or after the email address.


(*)===> after_validation

This callback is called after the model has been validated, and can be used to perform additional checks or modifications based on the validation results. Here's an example:
____________________________________________
class User < ApplicationRecord
  after_validation :check_errors

  private

  def check_errors
    if errors.any?
      puts "There are errors with the user object!"
    end
  end
end
____________________________________________

## In this example, the check_errors method is called after validation, and prints a message to the console if there are any errors on the object.



(*)===> before_save
This callback is called before the model is saved to the database, and can be used to perform additional modifications to the model attributes. Here's an example:
____________________________________________
class User < ApplicationRecord
  before_save :update_username

  private

  def update_username
    self.username = "#{first_name}.#{last_name}"
  end
end
____________________________________________

## In this example, the update_username method is called before the model is saved to the database, and sets the username attribute to the concatenation of the user's first name and last name with a period in between.


(*)===> around_save
This callback is called before and after the model is saved to the database, and can be used to perform additional actions before and after the save operation. Here's an example:

____________________________________________
class User < ApplicationRecord
  around_save :print_save_message

  private

  def print_save_message
    puts "About to save the user object!"
    yield
    puts "User object has been saved!"
  end
end
____________________________________________

## In this example, the print_save_message method is called before and after the save operation, and prints a message to the console before and after the save operation.

Here's an example of how this code works:
____________________________________________
user = User.new(name: "John Doe", email: "john.doe@example.com")
user.save
____________________________________________

When this code is executed, the following output will be printed to the console:
____________________________________________
About to save the user object!
User object has been saved!
____________________________________________

The print_save_message method is called before the save operation, which prints the "About to save the user object!" message. The yield statement allows the save operation to take place. After the save operation is complete, the print_save_message method is called again, which prints the "User object has been saved!" message.




(*)===> before_create
This callback is called before a new record is created in the database, and can be used to perform additional modifications to the model attributes. Here's an example:
____________________________________________
class User < ApplicationRecord
  before_create :set_default_status

  private

  def set_default_status
    self.status = "Active"
  end
end
____________________________________________

## In this example, the set_default_status method is called before a new record is created in the database, and sets the status attribute to "Active" by default.

(*)===> around_create
This callback is called before and after a new record is created in the database, and can be used to perform additional actions before and after the create operation. Here's an example:

____________________________________________
class User < ApplicationRecord
  around_create :print_create_message

  private

  def print_create_message
    puts "About to create a new user record!"
    yield
    puts "New user record has been created!"
  end
end
____________________________________________

## In this example, the print_create_message method is called before and after a new record is created in


(*)===> after_create

This callback is called after a new object is successfully created and saved to the database.
____________________________________________
class User < ApplicationRecord
  after_create :send_welcome_email

  private

  def send_welcome_email
    UserMailer.welcome_email(self).deliver_now
  end
end
____________________________________________
## This code defines an after_create callback that sends a welcome email to a new user after they are created and saved to the database.


(*)===> after_save

This callback is called after an object is created or updated and saved to the database.
____________________________________________
class User < ApplicationRecord
  after_save :update_search_index

  private

  def update_search_index
    SearchIndexService.update(self)
  end
end
____________________________________________
## This code defines an after_save callback that updates a search index every time a user is created or updated and saved to the database.


(*)===>  after_commit
This callback is called after a database transaction is committed.

____________________________________________
class User < ApplicationRecord
  after_commit :notify_slack, on: :create

  private

  def notify_slack
    SlackService.notify("New user created: #{self.name}")
  end
end
____________________________________________
## This code defines an after_commit callback that sends a notification to a Slack channel after a new user is created and the transaction is committed.


(*)===> after_rollback 
This callback is called after a database transaction is rolled back.
____________________________________________
class User < ApplicationRecord
  after_rollback :log_error

  private

  def log_error
    Rails.logger.error("Transaction failed: #{self.errors.full_messages}")
  end
end
____________________________________________
## This code defines an after_rollback callback that logs an error message to the Rails logger after a transaction is rolled back.


___________________________________________________________________

############# Available Callbacks: Updating an Object #############


(*)===> before_update
This callback is called before the object is updated in the database. This is a good place to modify the object's attributes before it is updated. For example:
____________________________________________
class User < ActiveRecord::Base
  before_update :update_last_login

  private

  def update_last_login
    self.last_login_at = Time.now.utc if sign_in_count_changed?
  end
end
____________________________________________
## In the example above, the update_last_login method is called before updating, which will update the last_login_at attribute of the user object if the sign_in_count attribute has changed.


(*)===> around_update
This callback is called around the update operation of the object. This is a good place to perform additional operations before and after the object is updated. For example:
____________________________________________
class User < ActiveRecord::Base
  around_update :log_update

  private

  def log_update
    Rails.logger.info("User is being updated with attributes: #{attributes_before_change}")
    yield
    Rails.logger.info("User has been updated with attributes: #{attributes}")
  end
end
____________________________________________



(*)===> after_update
This callback is called after the object is updated in the database. It can be used to perform any necessary actions after the update. For example:

____________________________________________
class User < ApplicationRecord
  after_update :send_email_notification

  def send_email_notification
    UserMailer.update_notification(self).deliver_now
  end
end

user = User.find(1)
user.first_name = 'John'
user.last_name = 'Doe'
user.save

# Output
# Email notification sent to john@example.com
____________________________________________

## In this example, the send_email_notification method is called after the user object is updated in the database. It sends an email notification to the user to notify them of the update. The output shows the message printed by the UserMailer class, indicating that the email was sent successfully.

___________________________________________________________________

############ Available Callbacks: Destroying an Object ############

(*)===> before_destroy

This callback is called before the object is destroyed from the database. It can be used to perform any necessary actions before the object is removed. For example:
____________________________________________
class User < ApplicationRecord
  before_destroy :send_goodbye_email

  def send_goodbye_email
    UserMailer.goodbye_notification(self).deliver_now
  end
end

user = User.find(1)
user.destroy

# Output
# Email notification sent to john@example.com
____________________________________________
## In this example, the send_goodbye_email method is called before the user object is destroyed from the database. It sends an email notification to the user to say goodbye. The output shows the message printed by the UserMailer class, indicating that the email was sent successfully.


(*)===> around_destroy
This callback is called around the destroy process. It can be used to perform additional actions before and after the destroy. For example:
____________________________________________
class User < ApplicationRecord
  around_destroy :log_deletion

  def log_deletion
    puts "Deleting user with ID #{id}"
    yield
    puts "User deleted"
  end
end

user = User.find(1)
user.destroy

# Output
# Deleting user with ID 1
# User deleted
____________________________________________
## In this example, the log_deletion method is called around the destroy process. It prints a message before and after the destroy and uses yield to call the actual destroy method. The output shows the messages printed before and after the destroy.

(*)===> after_destroy
This callback is called after the object is destroyed from the database. It can be used to perform any necessary actions after the object is removed. For example:
____________________________________________
class User < ApplicationRecord
  after_destroy :log_deletion

  def log_deletion
    puts "User with ID #{id} deleted"
  end
end

user = User.find(1)
user.destroy

# Output
# User with ID 1 deleted
____________________________________________
## In this example, the log_deletion method is called after the user object is destroyed from the database. It prints a message to confirm that the user was deleted. The output shows the message printed by the puts method.



(*)===>  after_commit / after_rollback 
These callbacks are called after the transaction that contains the destroy is committed or rolled back. They can be used to perform any necessary actions after the transaction is completed. For example:
____________________________________________
class User < ApplicationRecord
  after_destroy :log_deletion

  def log_deletion
    puts "User with ID #{id} deleted"
  end
end

ActiveRecord::Base.transaction do
  user = User.find(1)
  user.destroy
  raise ActiveRecord::Rollback
end

# Output
# (no output)
____________________________________________

## In this example, a transaction is used to destroy the user object, but the transaction is rolled back intentionally. The log_deletion method is still called after the destroy, but because the transaction was rolled back, the user object is not actually deleted from the database. The output shows that no message is printed by the puts method. If the transaction had been committed instead, the message would have been printed as usual.

___________________________________________________________________

############### after_initialize and after_find ###############
The after_initialize callback will be called whenever an Active Record object is instantiated, either by directly using new or when a record is loaded from the database. It can be useful to avoid the need to directly override your Active Record initialize method.

The after_find callback will be called whenever Active Record loads a record from the database. after_find is called before after_initialize if both are defined.



(*)===>The after_initialize and after_find callbacks have no before_* counterparts, but they can be registered just like the other Active Record callbacks.

____________________________________________
class User < ApplicationRecord
  after_initialize do |user|
    puts "You have initialized an object!"
  end

  after_find do |user|
    puts "You have found an object!"
  end
end
____________________________________________

(*)===>

____________________________________________
irb> User.new
You have initialized an object!
=> #<User id: nil>

irb> User.first
You have found an object!
You have initialized an object!
=> #<User id: 1>
____________________________________________


___________________________________________________________________

############### after_touch ###############

after_touch is a callback method in Ruby on Rails that gets called after a record has been touched. A record is considered touched if one of its associated records (e.g., a belongs_to or has_many association) has been added, updated, or removed.

(*)===>The after_touch callback will be called whenever an Active Record object is touched.
____________________________________________
class User < ApplicationRecord
  after_touch do |user|
    puts "You have touched an object"
  end
end
____________________________________________
irb> u = User.create(name: 'Kuldeep')
=> #<User id: 1, name: "Kuldeep", created_at: "2013-11-25 12:17:49", updated_at: "2013-11-25 12:17:49">

irb> u.touch
You have touched an object
=> true


(*)===> It can be used along with belongs_to:

____________________________________________
class Employee < ApplicationRecord
  belongs_to :company, touch: true
  after_touch do
    puts 'An Employee was touched'
  end
end

class Company < ApplicationRecord
  has_many :employees
  after_touch :log_when_employees_or_company_touched

  private
    def log_when_employees_or_company_touched
      puts 'Employee/Company was touched'
    end
end
____________________________________________

irb> @employee = Employee.last
=> #<Employee id: 1, company_id: 1, created_at: "2013-11-25 17:04:22", updated_at: "2013-11-25 17:05:05">

irb> @employee.touch # triggers @employee.company.touch
An Employee was touched
Employee/Company was touched
=> true

___________________________________________________________________

############### Running Callbacks ###############

(*)===> The following methods trigger callbacks:

    create
    create!
    destroy
    destroy!
    destroy_all
    destroy_by
    save
    save!
    save(validate: false)
    toggle!
    touch
    update_attribute
    update
    update!
    valid?

(*)===> Additionally, the after_find callback is triggered by the following finder methods:

    all
    first
    find
    find_by
    find_by_*
    find_by_*!
    find_by_sql
    last

(*)===> The after_initialize callback is triggered every time a new object of the class is initialized.

(*)===> The find_by_* and find_by_*! methods are dynamic finders generated automatically for every attribute.

___________________________________________________________________

############### Skipping Callbacks ###############

(*)===> Just as with validations, it is also possible to skip callbacks by using the following methods:

    decrement!
    decrement_counter
    delete
    delete_all
    delete_by
    increment!
    increment_counter
    insert
    insert!
    insert_all
    insert_all!
    touch_all
    update_column
    update_columns
    update_all
    update_counters
    upsert
    upsert_all

These methods should be used with caution, however, because important business rules and application logic may be kept in callbacks. Bypassing them without understanding the potential implications may lead to invalid data.

___________________________________________________________________

############### Halting Execution ###############
As you start registering new callbacks for your models, they will be queued for execution. This queue will include all your model's validations, the registered callbacks, and the database operation to be executed.

The whole callback chain is wrapped in a transaction. If any callback raises an exception, the execution chain gets halted and a ROLLBACK is issued. To intentionally stop a chain use:

(*)===> throw :abort


Any exception that is not ActiveRecord::Rollback or ActiveRecord::RecordInvalid will be re-raised by Rails after the callback chain is halted. Raising an exception other than ActiveRecord::Rollback or ActiveRecord::RecordInvalid may break code that does not expect methods like save and update (which normally try to return true or false) to raise an exception.


(*)===>  you can halt the execution of a callback by returning false 

In Rails, you can halt the execution of a callback by returning false from the callback method. This is useful when you need to stop further processing based on some condition, such as failing a validation check or detecting an error.

Here's an example of halting the execution of a before_save callback if the user's email is invalid:

_________________________________________________
class User < ApplicationRecord
  before_save :validate_email

  def validate_email
    unless email.match(/\A([\w+\-].?)+@[a-z\d\-]+(\.[a-z]+)*\.[a-z]+\z/i)
      errors.add(:email, "is invalid")
      return false
    end
  end
end
_________________________________________________

## In this example, the before_save callback validate_email checks if the user's email is valid using a regular expression. If the email is invalid, the callback adds an error to the model's errors collection and returns false. This stops the execution of the before_save callback and prevents the user from being saved to the database.

___________________________________________________________________

############### Relational Callbacks ###############
Callbacks work through model relationships, and can even be defined by them. Suppose an example where a user has many articles. A user's articles should be destroyed if the user is destroyed. Let's add an after_destroy callback to the User model by way of its relationship to the Article model:

(*)===>
____________________________________________
class User < ApplicationRecord
  has_many :articles, dependent: :destroy
end

class Article < ApplicationRecord
  after_destroy :log_destroy_action

  def log_destroy_action
    puts 'Article destroyed'
  end
end
____________________________________________

irb> user = User.first
=> #<User id: 1>
irb> user.articles.create!
=> #<Article id: 1, user_id: 1>
irb> user.destroy
Article destroyed
=> #<User id: 1>


___________________________________________________________________

############### Conditional Callbacks ###############

When using the :if option, the callback won't be executed if the predicate method returns false; 

when using the :unless option, the callback won't be executed if the predicate method returns true.


(*)===> Using :if and :unless with a Symbol
____________________________________________
class Order < ApplicationRecord
  before_save :normalize_card_number, if: :paid_with_card?
end
____________________________________________

(*)===> Using :if and :unless with a Proc
____________________________________________
class Order < ApplicationRecord
  before_save :normalize_card_number,
    if: Proc.new { |order| order.paid_with_card? }
end
____________________________________________


As the proc is evaluated in the context of the object, it is also possible to write this as:
____________________________________________
class Order < ApplicationRecord
  before_save :normalize_card_number, if: Proc.new { paid_with_card? }
end
____________________________________________


(*)===> Using both :if and :unless
____________________________________________
class Comment < ApplicationRecord
  before_save :filter_content,
    if: Proc.new { forum.parental_control? },
    unless: Proc.new { author.trusted? }
end
____________________________________________


(*)===> Multiple Callback Conditions
____________________________________________
class Comment < ApplicationRecord
  before_save :filter_content,
    if: [:subject_to_parental_control?, :untrusted_author?]
end
____________________________________________


___________________________________________________________________

############### Callback Classes ###############

(*)===> Here's an example where we create a class with an after_destroy callback for a PictureFile model:
____________________________________________
class PictureFileCallbacks
  def after_destroy(picture_file)
    if File.exist?(picture_file.filepath)
      File.delete(picture_file.filepath)
    end
  end
end
____________________________________________


(*)===>When declared inside a class, as above, the callback methods will receive the model object as a parameter. We can now use the callback class in the model:

____________________________________________
class PictureFile < ApplicationRecord
  after_destroy PictureFileCallbacks.new
end
____________________________________________
## Note that we needed to instantiate a new PictureFileCallbacks object, since we declared our callback as an instance method. This is particularly useful if the callbacks make use of the state of the instantiated object. 

(*)===> often, however, it will make more sense to declare the callbacks as class methods:
____________________________________________
class PictureFileCallbacks
  def self.after_destroy(picture_file)
    if File.exist?(picture_file.filepath)
      File.delete(picture_file.filepath)
    end
  end
end
____________________________________________


(*)===>If the callback method is declared this way, it won't be necessary to instantiate a PictureFileCallbacks object.
____________________________________________
class PictureFile < ApplicationRecord
  after_destroy PictureFileCallbacks
end
____________________________________________
## You can declare as many callbacks as you want inside your callback classes.

___________________________________________________________________

############### Transaction Callbacks ###############
There are two additional callbacks that are triggered by the completion of a database transaction: after_commit and after_rollback. 


(*)===>Consider, for example, the previous example where the PictureFile model
____________________________________________
PictureFile.transaction do
  picture_file_1.destroy
  picture_file_2.save!
end
____________________________________________

By using the after_commit callback we can account for this case.
____________________________________________
class PictureFile < ApplicationRecord
  after_commit :delete_picture_file_from_disk, on: :destroy

  def delete_picture_file_from_disk
    if File.exist?(filepath)
      File.delete(filepath)
    end
  end
end
____________________________________________



(*)===> Since using the after_commit callback only on create, update, or delete is common, there are aliases for those operations:

    after_create_commit
    after_update_commit
    after_destroy_commit

____________________________________________
class PictureFile < ApplicationRecord
  after_destroy_commit :delete_picture_file_from_disk

  def delete_picture_file_from_disk
    if File.exist?(filepath)
      File.delete(filepath)
    end
  end
end
____________________________________________



(*)===> There is also an alias for using the after_commit callback for both create and update together:

    after_save_commit

____________________________________________
class User < ApplicationRecord
  after_save_commit :log_user_saved_to_db

  private
  def log_user_saved_to_db
    puts 'User was saved to database'
  end
end
____________________________________________

irb> @user = User.create # creating a User
User was saved to database

irb> @user.save # updating @user
User was saved to database

___________________________________________________________________

############### END ###############

