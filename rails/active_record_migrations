---------------------------------------------------------------------
			Active Record Migrations
---------------------------------------------------------------------

Migrations are a convenient way to alter your database schema over time in a consistent way. They use a Ruby DSL so that you don't have to write SQL by hand, allowing your schema and changes to be database independent.

You can think of each migration as being a new 'version' of the database. A schema starts off with nothing in it, and each migration modifies it to add or remove tables, columns, or entries. Active Record knows how to update your schema along this timeline, bringing it from whatever point it is in the history to the latest version. Active Record will also update your db/schema.rb file to match the up-to-date structure of your database.

Here's an example of a migration:

class CreateProducts < ActiveRecord::Migration[7.0]
  def change
    create_table :products do |t|
      t.string :name
      t.text :description

      t.timestamps
    end
  end
end

This migration adds a table called products with a string column called name and a text column called description. A primary key column called id will also be added implicitly, as it's the default primary key for all Active Record models. The timestamps macro adds two columns, created_at and updated_at. These special columns are automatically managed by Active Record if they exist.

Note that we define the change that we want to happen moving forward in time. Before this migration is run, there will be no table. After, the table will exist. Active Record knows how to reverse this migration as well: if we roll this migration back, it will remove the table.

On databases that support transactions with statements that change the schema, migrations are wrapped in a transaction. If the database does not support this then when a migration fails the parts of it that succeeded will not be rolled back. You will have to rollback the changes that were made by hand.

___________________________________________________________________

############### migration to do something that Active Record doesn't know how to reverse ###############

(1)===>	
class ChangeProductsPrice < ActiveRecord::Migration[7.0]
  def change
    reversible do |dir|
      change_table :products do |t|
        dir.up   { t.change :price, :string }
        dir.down { t.change :price, :integer }
      end
    end
  end
end


(*)===> Alternatively, you can use up and down instead of change:

class ChangeProductsPrice < ActiveRecord::Migration[7.0]
  def up
    change_table :products do |t|
      t.change :price, :string
    end
  end

  def down
    change_table :products do |t|
      t.change :price, :integer
    end
  end
end

___________________________________________________________________

############### Creating a Migration ###############

(1)===>	Creating a Standalone Migration

```
bin/rails generate migration AddPartNumberToProducts

```

##This will create an appropriately named empty migration:

class AddPartNumberToProducts < ActiveRecord::Migration[7.0]
  def change
  end
end

(#)===>	If the migration name is of the form "AddColumnToTable" or "RemoveColumnFromTable" and is followed by a list of column names and types then a migration containing the appropriate add_column and remove_column statements will be created.

```
$ bin/rails generate migration AddPartNumberToProducts part_number:string

```

##will generate

class AddPartNumberToProducts < ActiveRecord::Migration[7.0]
  def change
    add_column :products, :part_number, :string
  end
end


(#)===>	If you'd like to add an index on the new column, you can do that as well.

```
$ bin/rails generate migration AddPartNumberToProducts part_number:string:index

```

##  will generate the appropriate add_column and add_index statements:

class AddPartNumberToProducts < ActiveRecord::Migration[7.0]
  def change
    add_column :products, :part_number, :string
    add_index :products, :part_number
  end
end


(#)===>	Similarly, you can generate a migration to remove a column from the command line:

```
$ bin/rails generate migration RemovePartNumberFromProducts part_number:string

```

##generates

class RemovePartNumberFromProducts < ActiveRecord::Migration[7.0]
  def change
    remove_column :products, :part_number, :string
  end
end

(#)===>	 You are not limited to one magically generated column. For example:

```
bin/rails generate migration AddDetailsToProducts part_number:string price:decimal

```

##generates

class AddDetailsToProducts < ActiveRecord::Migration[7.0]
  def change
    add_column :products, :part_number, :string
    add_column :products, :price, :decimal
  end
end


(#)===>	If the migration name is of the form "CreateXXX" and is followed by a list of column names and types then a migration creating the table XXX with the columns listed will be generated. For example:

```
$ bin/rails generate migration CreateProducts name:string part_number:string

```

##generates
class CreateProducts < ActiveRecord::Migration[7.0]
  def change
    create_table :products do |t|
      t.string :name
      t.string :part_number

      t.timestamps
    end
  end
end


(#)===>	Also, the generator accepts column type as references (also available as belongs_to). For example,

```
$ bin/rails generate migration AddUserRefToProducts user:references

```

###generates the following add_reference call:

class AddUserRefToProducts < ActiveRecord::Migration[7.0]
  def change
    add_reference :products, :user, foreign_key: true
  end
end

##This migration will create a user_id column. References are a shorthand for creating columns, indexes, foreign keys, or even polymorphic association columns.


(#)===>	There is also a generator which will produce join tables if JoinTable is part of the name:

```
$ bin/rails generate migration CreateJoinTableCustomerProduct customer product

```

##will produce the following migration:

class CreateJoinTableCustomerProduct < ActiveRecord::Migration[7.0]
  def change
    create_join_table :customers, :products do |t|
      # t.index [:customer_id, :product_id]
      # t.index [:product_id, :customer_id]
    end
  end
end


___________________________________________________________________

############### Model Generators ###############

(1)===>	The model, resource, and scaffold generators will create migrations appropriate for adding a new model:

```
$ bin/rails generate model Product name:string description:text

```
##will create a migration that looks like this

class CreateProducts < ActiveRecord::Migration[7.0]
  def change
    create_table :products do |t|
      t.string :name
      t.text :description

      t.timestamps
    end
  end
end

##You can append as many column name/type pairs as you want.

	
___________________________________________________________________

############### Passing Modifiers ###############

Some commonly used type modifiers can be passed directly on the command line. They are enclosed by curly braces {} and follow the field type:

```
$ bin/rails generate migration AddDetailsToProducts 'price:decimal{5,2}' supplier:references{polymorphic}

```

##will produce a migration that looks like this

class AddDetailsToProducts < ActiveRecord::Migration[7.0]
  def change
    add_column :products, :price, :decimal, precision: 5, scale: 2
    add_reference :products, :supplier, polymorphic: true
  end
end


___________________________________________________________________

############### Writing a Migration ###############

(1)===>	Creating a Table

create_table :products do |t|
  t.string :name
end

##which creates a products table with a column called name.

##By default, create_table will create a primary key called id. 
##You can change the name of the primary key with the :primary_key option or, 
##if you don't want a primary key at all, you can pass the option id: false. 

___________________________________________________________________

###############	Creating a Join Table ###############

The migration method create_join_table creates an HABTM (has and belongs to many) join table. A typical use would be:

create_join_table :products, :categories

##which creates a categories_products table with two columns called category_id and product_id. 


(#)===>	These columns have the option :null set to false by default. This can be overridden by specifying the :column_options option:

create_join_table :products, :categories, column_options: { null: true }


(#)===> By default, the name of the join table comes from the union of the first two arguments provided to create_join_table, in alphabetical order. To customize the name of the table, provide a :table_name option:	

create_join_table :products, :categories, table_name: :categorization

##creates a categorization table.


(#)===>	create_join_table also accepts a block, which you can use to add indices (which are not created by default) or additional columns:

create_join_table :products, :categories do |t|
  t.index :product_id
  t.index :category_id
end


___________________________________________________________________

############### Changing Tables ###############

A close cousin of create_table is change_table, used for changing existing tables. It is used in a similar fashion to create_table but the object yielded to the block knows more tricks.


(#)===>	

change_table :products do |t|
  t.remove :description, :name
  t.string :part_number
  t.index :part_number
  t.rename :upccode, :upc_code
end

##removes the description and name columns, 
##creates a part_number string column and 
##adds an index on it. 
##Finally it renames the upccode column.


___________________________________________________________________

############### Changing Columns ###############
Like the remove_column and add_column Rails provides the change_column migration method.

(#)===>	change_column

change_column :products, :part_number, :text

##This changes the column part_number on products table to be a :text field. 

#*#Note that change_column command is irreversible.


(#)===>	 change_column_null and change_column_default

change_column_null :products, :name, false
change_column_default :products, :approved, from: true, to: false


##This sets :name field on products to a NOT NULL column
##and the default value of the :approved field from true to false.
##These are reversible

##You could also write the above change_column_default migration as change_column_default :products, :approved, false, but unlike the previous example, this would make your migration irreversible.

___________________________________________________________________

############### Column Modifiers ###############
Column modifiers can be applied when creating or changing a column:
	
(*) comment ===> Adds a comment for the column.

(*) collation ===> Specifies the collation for a string or text column.
In database systems, Collation specifies how data is sorted and compared in a database. Collation provides the sorting rules, case, and accent sensitivity properties for the data in the database.

For example, when you run a query using the ORDER BY clause, collation determines whether or not uppercase letters and lowercase letters are treated the same.


(*) default ===> Allows to set a default value on the column. Note that if you are using a dynamic value (such as a date), the default will only be calculated the first time (i.e. on the date the migration is applied). Use nil for NULL.
(*) limit ===> Sets the maximum number of characters for a string column and the maximum number of bytes for text/binary/integer columns.
(*) null ===> Allows or disallows NULL values in the column.


(*) precision ===> Specifies the precision for decimal/numeric/datetime/time columns.

the precision is the number of significant digits, while the scale is the number of digits that can be stored following the decimal point. For example, the number 123.45 has a precision of 5 and a scale of 2. A decimal with a precision of 5 and a scale of 2 can range from -999.99 to 999.99.


(*) scale ===> Specifies the scale for the decimal and numeric columns, representing the number of digits after the decimal point.


##For add_column or change_column there is no option for adding indexes. They need to be added separately using add_index.

##null and default cannot be specified via command line.

In Rails, column modifiers are used to modify the attributes of database columns. Some of the commonly used column modifiers in Rails, along with examples, are:

===> limit: This modifier is used to specify the maximum size of the column. For example:

ruby

# Create a table with a string column of maximum length 255 characters
create_table :users do |t|
  t.string :name, limit: 255
end

===> default: This modifier is used to set a default value for the column. For example:

ruby

# Create a table with a boolean column with a default value of false
create_table :users do |t|
  t.boolean :active, default: false
end

===> null: This modifier is used to specify whether the column allows null values or not. For example:

ruby

# Create a table with a string column that does not allow null values
create_table :users do |t|
  t.string :email, null: false
end

===> precision and :scale: These modifiers are used to specify the precision and scale of decimal columns. For example:

ruby

# Create a table with a decimal column with precision 10 and scale 2
create_table :products do |t|
  t.decimal :price, precision: 10, scale: 2
end

===> index: This modifier is used to create an index on the column for faster database searches. For example:

ruby

# Create a table with an index on the email column
create_table :users do |t|
  t.string :email
  t.index :email
end

===> unique: This modifier is used to create a unique constraint on the column to prevent duplicate values. For example:

ruby

# Create a table with a unique index on the email column
create_table :users do |t|
  t.string :email, unique: true
end

===> foreign_key: This modifier is used to specify a foreign key constraint on the column. For example:

ruby

# Create a table with a foreign key constraint on the user_id column
create_table :posts do |t|
  t.string :title
  t.text :body
  t.integer :user_id
  t.foreign_key :users
end

===> comment: This modifier is used to add a comment to a column in the database schema. This can be useful for providing additional information about the purpose or usage of a particular column. For example:

ruby

# Create a table with a string column with a comment
create_table :users do |t|
  t.string :name, comment: "The user's full name"
end

In this example, the comment "The user's full name" will be added to the name column in the users table in the database schema.

===> collation: This modifier is used to set the collation for a string or text column in the database schema. The collation determines the sorting and comparison rules used for the column. For example:

ruby

# Create a table with a text column with a custom collation
create_table :posts do |t|
  t.text :body, collation: "utf8mb4_general_ci"
end

In this example, the body column in the posts table will use the utf8mb4_general_ci collation for sorting and comparison.

These are the two additional column modifiers in Rails, which can be useful for adding comments and setting collations for database columns.

These are some of the commonly used column modifiers in Rails. There are many more modifiers available, and you can find a full list in the Rails documentation.
___________________________________________________________________

############### References ###############

(#)===>	The add_reference method allows the creation of an appropriately named column.

add_reference :users, :role

##This migration will create a role_id column in the users table.

##It creates an index for this column as well, unless explicitly told not with the index: false option:

(#)===>	 index: false option:

add_reference :users, :role, index: false


(#)===>	The method add_belongs_to is an alias of add_reference.

add_belongs_to :taggings, :taggable, polymorphic: true

##The polymorphic option will create two columns on the taggings table which can be used for polymorphic associations: taggable_type and taggable_id.

(#)===>	A foreign key can be created with the foreign_key option.

add_reference :users, :role, foreign_key: true


(#)===>	References can also be removed:

remove_reference :products, :user, foreign_key: true, index: false

___________________________________________________________________

############### Foreign Keys ###############

While it's not required you might want to add foreign key constraints to guarantee referential integrity.

(#)===>	add foreign key

add_foreign_key :articles, :authors

##This add_foreign_key call adds a new constraint to the articles table. 
##The constraint guarantees that a row in the authors table exists where the id column matches the articles.author_id.

(#)===>	

If the from_table column name cannot be derived from the to_table name, you can use the :column option. Use the :primary_key option if the referenced primary key is not :id.

##For example, to add a foreign key on articles.reviewer referencing authors.email:

add_foreign_key :articles, :authors, column: :reviewer, primary_key: :email

##add_foreign_key also supports options such as name, on_delete, if_not_exists, validate, and deferrable.

##Active Record only supports single column foreign keys. execute and structure.sql are required to use composite foreign keys.

(#)===>	Foreign keys can also be removed:

# let Active Record figure out the column name
remove_foreign_key :accounts, :branches

# remove foreign key for a specific column
remove_foreign_key :accounts, column: :owner_id


___________________________________________________________________

############### execute arbitrary SQL ###############

If the helpers provided by Active Record aren't enough you can use the execute method to execute arbitrary SQL:

(#)===>	

Product.connection.execute("UPDATE products SET price = 'free' WHERE 1=1")

___________________________________________________________________

############### * Using the change Method * ###############

(*)    add_column
(*)    add_foreign_key
(*)    add_index
(*)    add_reference
(*)    add_timestamps
(*)    change_column_comment (must supply a :from and :to option)
(*)    change_column_default (must supply a :from and :to option)
(*)    change_column_null
(*)    change_table_comment (must supply a :from and :to option)
(*)    create_join_table
(*)    create_table
(*)    disable_extension
(*)    drop_join_table
(*)    drop_table (must supply a block)
(*)    enable_extension
(*)    remove_column (must supply a type)
(*)    remove_foreign_key (must supply a second table)
(*)    remove_index
(*)    remove_reference
(*)    remove_timestamps
(*)    rename_column
(*)    rename_index
(*)    rename_table


(#)===> change_table

change_table is also reversible, as long as the block does not call change, change_default or remove.

(#)===> remove_column

remove_column is reversible if you supply the column type as the third argument. Provide the original column options too, otherwise Rails can't recreate the column exactly when rolling back:

  remove_column :posts, :slug, :string, null: false, default: ''

##If you're going to need to use any other methods, you should use reversible or write the up and down methods instead of using the change method.


Here are some examples of each method in Rails migration:

(*)===> add_column: adds a new column to a table.
add_column :users, :age, :integer

(*)===> add_foreign_key: adds a foreign key constraint between two tables.
add_foreign_key :comments, :users

(*)===> add_index: adds an index to a table.
add_index :posts, :title

(*)===> add_reference: adds a new reference column to a table.
add_reference :comments, :post, foreign_key: true

(*)===> add_timestamps: adds created_at and updated_at columns to a table.
add_timestamps :users

(*)===> change_column_comment: changes the comment of a column.
change_column_comment :users, :name, from: 'Old comment', to: 'New comment'

(*)===> change_column_default: changes the default value of a column.
change_column_default :users, :admin, from: false, to: true

(*)===> change_column_null: changes the nullability of a column.
change_column_null :users, :name, false

(*)===> change_table_comment: changes the comment of a table.
change_table_comment :users, from: 'Old comment', to: 'New comment'

(*)===> create_join_table: creates a join table between two tables.
create_join_table :posts, :tags

(*)===> create_table: creates a new table.
create_table :users do |t|
  t.string :name
  t.integer :age
  t.boolean :admin, default: false
  t.timestamps
end

(*)===> disable_extension: disables a PostgreSQL extension.
disable_extension 'hstore'

(*)===> drop_join_table: drops a join table.
drop_join_table :posts, :tags

(*)===> drop_table: drops a table.
drop_table :users

(*)===> enable_extension: enables a PostgreSQL extension.
enable_extension 'hstore'

(*)===> remove_column: removes a column from a table.
remove_column :users, :age, :integer

(*)===> remove_foreign_key: removes a foreign key constraint between two tables.
remove_foreign_key :comments, :users

(*)===> remove_index: removes an index from a table.
remove_index :posts, :title

(*)===> remove_reference: removes a reference column from a table.
remove_reference :comments, :post, foreign_key: true

(*)===> remove_timestamps: removes created_at and updated_at columns from a table.
remove_timestamps :users

(*)===> rename_column: renames a column in a table.
rename_column :users, :name, :full_name

(*)===> rename_index: renames an index in a table.
rename_index :posts, 'index_posts_on_title', 'index_posts_on_subject'

(*)===> rename_table: renames a table.
rename_table :users, :accounts


___________________________________________________________________

############### Using reversible ###############

class ExampleMigration < ActiveRecord::Migration[7.0]
  def change
    create_table :distributors do |t|
      t.string :zipcode
    end

    reversible do |dir|
      dir.up do
        # add a CHECK constraint
        execute <<-SQL
          ALTER TABLE distributors
            ADD CONSTRAINT zipchk
              CHECK (char_length(zipcode) = 5) NO INHERIT;
        SQL
      end
      dir.down do
        execute <<-SQL
          ALTER TABLE distributors
            DROP CONSTRAINT zipchk
        SQL
      end
    end

    add_column :users, :home_page_url, :string
    rename_column :users, :email, :email_address
  end
end

___________________________________________________________________

############### Using the up/down Methods ###############

The up method should describe the transformation you'd like to make to your schema, and the down method of your migration should revert the transformations done by the up method.

##If your migration is irreversible, you should raise ActiveRecord::IrreversibleMigration from your down method. If someone tries to revert your migration, an error message will be displayed saying that it can't be done.

___________________________________________________________________

###############  Reverting Previous Migrations ###############

You can use Active Record's ability to rollback migrations using the revert method:

(#)===>

require_relative "20121212123456_example_migration"

class FixupExampleMigration < ActiveRecord::Migration[7.0]
  def change
    revert ExampleMigration

    create_table(:apples) do |t|
      t.string :variety
    end
  end
end
	
___________________________________________________________________

############### Running Migrations ###############

(#)===>	run all pending migrations

```
$ bin/rails db:migrate

```

(#)===>	to run certain sets of migrations.

```
$ bin/rails db:migrate VERSION=20080906120000

```

##If version 20080906120000 is greater than the current version (i.e., it is migrating upwards), this will run the change (or up) method on all migrations up to and including 20080906120000,
##and will not execute any later migrations.

##If migrating downwards, this will run the down method on all the migrations down to, but not including, 20080906120000.

(#)===> Running Specific Migrations

##If you need to run a specific migration up or down, the db:migrate:up and db:migrate:down commands will do that.

##Just specify the appropriate version and the corresponding migration will have its change, up or down method invoked, for example:

```
$ bin/rails db:migrate:up VERSION=20080906120000

```

##will run the 20080906120000 migration by running the change method (or the up method).

##This command will first check whether the migration is already performed and will do nothing if Active Record believes that it has already been run.


___________________________________________________________________

############### Rolling Back ###############

(#)===>	rollback the latest run migration.

```
$ bin/rails db:rollback

```
##This will rollback the latest migration, either by reverting the change method or by running the down method. 

(#)===>	If you need to undo several migrations you can provide a STEP parameter:

```
$ bin/rails db:rollback STEP=3

```

##will revert the last 3 migrations.


(#)===>	redo command 
The db:migrate:redo command is a shortcut for doing a rollback and then migrating back up again.

```
$ bin/rails db:migrate:redo STEP=3

```

___________________________________________________________________

############### Setup the Database ###############

The bin/rails db:setup command will create the database, load the schema, and initialize it with the seed data.

```
$ bin/rails db:setup

```
___________________________________________________________________

############### Resetting the Database ###############

The bin/rails db:reset command will drop the database and set it up again. 

This is functionally equivalent to bin/rails db:drop db:setup.

```
$ bin/rails db:reset

```

##This is not the same as running all the migrations. It will only use the contents of the current db/schema.rb or db/structure.sql file. 
##If a migration can't be rolled back, bin/rails db:reset may not help you.

___________________________________________________________________

########## Running Migrations in Different Environments ###########

##By default running bin/rails db:migrate will run in the development environment. 

##To run migrations against another environment you can specify it using the RAILS_ENV environment variable while running the command.

## For example to run migrations against the test environment you could run:

```
$ bin/rails db:migrate RAILS_ENV=test

```
___________________________________________________________________

############### Changing Existing Migrations ###############

##In general, editing existing migrations is not a good idea. 

##You will be creating extra work for yourself and your co-workers and cause major headaches if the existing version of the migration has already been run on production machines. 

##Instead, you should write a new migration that performs the changes you require. 

##Editing a freshly generated migration that has not yet been committed to source control (or, more generally, which has not been propagated beyond your development machine) is relatively harmless.

___________________________________________________________________

############### Schema Dumping and You ###############

(#)===>	db:schema:load

it is to replay the entire migration history

```
$ bin/rails db:schema:load

```

___________________________________________________________________

############### Seed Data ###############

##To add initial data after a database is created, Rails has a built-in 'seeds' feature that speeds up the process. 

##This is especially useful when reloading the database frequently in development and test environments. 

##To get started with this feature, fill up db/seeds.rb with some Ruby code,

5.times do |i|
  Product.create(name: "Product ##{i}", description: "A product.")
end

## and run 

``` 
bin/rails db:seed:
```
___________________________________________________________________

############### Old Migrations ###############

(#)===>	migrate:status 
``` 
bin/rails db:migrate:status 

```

##which displays the status (up or down) of each migration,

## you should see ********** NO FILE ********** displayed next to any deleted migration file which was once executed on a specific environment but can no longer be found in the db/migrate/ directory.
___________________________________________________________________

############### END ###############

