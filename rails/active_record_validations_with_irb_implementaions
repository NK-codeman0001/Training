---------------------------------------------------------------------
               			Active Record Validations
---------------------------------------------------------------------

Why Use Validations?

Validations are used to ensure that only valid data is saved into your database. For example, it may be important to your application to ensure that every user provides a valid email address and mailing address. 
Model-level validations are the best way to ensure that only valid data is saved into your database. 
They are database agnostic, cannot be bypassed by end users, and are convenient to test and maintain. 
Rails provides built-in helpers for common needs, and allows you to create your own validation methods as well.

There are several other ways to validate data before it is saved into your database, including

native database constraints, 
client-side validations and 
controller-level validations. 

The following methods trigger validations, and will save the object to the database only if the object is valid:

    create
    create!
    save
    save!
    update
    update!

====> The bang versions (e.g. save!) raise an exception if the record is invalid. The non-bang versions don't: save and update return false, and create returns the object.


___________________________________________________________________

############### Skipping Validations ###############

The following methods skip validations, and will save the object to the database regardless of its validity. They should be used with caution.

(*)===>    decrement!
(*)===>    decrement_counter
(*)===>    increment!
(*)===>    increment_counter
(*)===>    insert
(*)===>    insert!
(*)===>    insert_all
(*)===>    insert_all!
(*)===>    toggle!
(*)===>    touch
(*)===>    touch_all
(*)===>    update_all
(*)===>    update_attribute
(*)===>    update_column
(*)===>    update_columns
(*)===>    update_counters
(*)===>    upsert
(*)===>    upsert_all

Note that save also has the ability to skip validations if passed validate:
false as an argument. This technique should be used with caution.

(*)===>    save(validate: false)

___________________________________________________________________

############### valid? and invalid? ###############

 _____________________________________
|  class User < ApplicationRecord     |
|    validates :name, presence: true  |
|  end                                |
|_____________________________________|

//rails c 

//console implementations
(*)===> User.create(name: "Neeraj").valid?
  TRANSACTION (0.4ms)  BEGIN
  User Create (1.3ms)  INSERT INTO "users" ("name", "gender", "age", "address", "terms_and_conditions", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["name", "Neeraj"], ["gender", nil], ["age", nil], ["address", nil], ["terms_and_conditions", false], ["created_at", "2023-03-24 13:18:46.717973"], ["updated_at", "2023-03-24 13:18:46.717973"]]                                
  TRANSACTION (19.3ms)  COMMIT                              
 => true  
                                                    
(*)===> User.create(name: nil).valid?
 => false 

___________________________________________________________________

############### Errors ###############

 _____________________________________
|  class User < ApplicationRecord     |
|    validates :name, presence: true  |
|  end                                |
|_____________________________________|

//rails c 

//console implementations

(*)===> p= User.new
 => 

(*)===> p.errors.size
 => 0 

(*)===> p.valid?
 => false 

(*)===> p.errors.objects.first.full_message
 => "Name can't be blank" 
 
(*)===> p.save
 => false 

(*)===> p.save!
/usr/share/rvm/gems/ruby-3.2.1/gems/activerecord-7.0.4.3/lib/active_record/validations.rb:80:in `raise_validation_error': Validation failed: Name can't be blank (ActiveRecord::RecordInvalid)   

(*)===> p = User.create
 => 
#<User:0x00007f4bde17dac8                            

(*)===> p.errors.objects.first.full_message
 => "Name can't be blank" 

(*)===> p.save
 => false 

(*)===> p.save!
/usr/share/rvm/gems/ruby-3.2.1/gems/activerecord-7.0.4.3/lib/active_record/validations.rb:80:in `raise_validation_error': Validation failed: Name can't be blank (ActiveRecord::RecordInvalid) 

(*)===> User.create
 => 
#<User:0x00007f4bde3117e0                                   
 id: nil,                                                   
 name: nil,                                                 
 gender: nil,                                               
 age: nil,                                                  
 address: nil,                                              
 terms_and_conditions: false,                               
 created_at: nil,                                           
 updated_at: nil>                                           
 
(*)===> User.create!
/usr/share/rvm/gems/ruby-3.2.1/gems/activerecord-7.0.4.3/lib/active_record/validations.rb:80:in `raise_validation_error': Validation failed: Name can't be blank (ActiveRecord::RecordInvalid) 


(*)===>  User.new.errors[:name]
 => [] 

(*)===>  User.new.errors[:name].any?
 => false
 
(*)===>  User.create.errors[:name].any?
 => true
 
(*)===>  User.create.errors[:name]
 => ["can't be blank"]  


___________________________________________________________________

############### Validation Helpers : acceptance ###############

 _______________________________________________________
|  class User < ApplicationRecord     			|
|    validates :terms_and_conditions, acceptance: true  |
|  end                                			|
|_______________________________________________________|

##This check is performed only if terms_of_service is not nil. The default error message for this helper is "must be accepted". You can also pass in a custom message via the message option.

 ________________________________________________________________________________
|  class User < ApplicationRecord     						 |
|    validates :terms_and_conditions, acceptance: { message: 'must be abided' }  |
|  end                                						 |
|________________________________________________________________________________|
##It can also receive an :accept option, which determines the allowed values that will be considered as accepted. It defaults to ['1', true] and can be easily changed
________________________________________________________________________________
|  class User < ApplicationRecord     						 |
|    validates :terms_and_conditions, acceptance: { accept: 'yes' }  		 |
|                                  OR						 |
|    validates :terms_and_conditions, acceptance { accept: ['TRUE', 'accepted'] }|
|  end                                						 |
|________________________________________________________________________________|

##This validation is very specific to web applications and this 'acceptance' does not need to be recorded anywhere in your database. If you don't have a field for it, the helper will create a virtual attribute. If the field does exist in your database, the accept option must be set to or include true or else the validation will not run.

___________________________________________________________________

#############  Validation Helpers : validates_associated  #############
________________________________________________________________________________
|    class Library < ApplicationRecord 						|
|     has_many :books  		 						|
|     validates_associated :books 						|
|    end                                					|
|_______________________________________________________________________________|

##This validation will work with all of the association types

##Don't use validates_associated on both ends of your associations. 
They would call each other in an infinite loop.

##The default error message for validates_associated is "is invalid". 
Note that each associated object will contain its own errors collection; 
errors do not bubble up to the calling model.

___________________________________________________________________

############### Validation Helpers : confirmation  ###############

 _______________________________________________________
|  class User < ApplicationRecord     			|
|    validates :email, confirmation: true		|
|  end                                			|
|_______________________________________________________|


(*)===> In your view template you could use something like.

<%= text_field :person, :email %>
<%= text_field :person, :email_confirmation %>
	

(*)===> This check is performed only if email_confirmation is not nil. To require confirmation, make sure to add a presence check for the confirmation attribute (we'll take a look at presence later on in this guide):

 _______________________________________________________
|  class User < ApplicationRecord     			|
|    validates :email, confirmation: true		|
|    validates :email_confirmation, presence: true      |
|  end                                			|
|_______________________________________________________|


(*)===> There is also a :case_sensitive option that you can use to define whether the confirmation constraint will be case sensitive or not. This option defaults to true.
 _______________________________________________________________________
|  class User < ApplicationRecord     					|
|    validates :email, confirmation: { case_sensitive: false }		|
|  end                                					|
|_______________________________________________________________________|

##The default error message for this helper is "doesn't match confirmation".
___________________________________________________________________

############### Validation Helpers :  ###############

()===>
	
()===>

()===>
	
()===>

___________________________________________________________________

###############  ###############

()===>
	
()===>

()===>
	
()===>

___________________________________________________________________

###############  ###############

()===>
	
()===>

()===>
	
()===>

___________________________________________________________________

###############  ###############

()===>
	
()===>

()===>
	
()===>

___________________________________________________________________

###############  ###############

()===>
	
()===>

()===>
	
()===>

___________________________________________________________________

###############  ###############

()===>
	
()===>

()===>
	
()===>

___________________________________________________________________

###############  ###############

()===>
	
()===>

()===>
	
()===>

___________________________________________________________________

###############  ###############

()===>
	
()===>

()===>
	
()===>

___________________________________________________________________

###############  ###############

()===>
	
()===>

()===>
	
()===>

___________________________________________________________________

###############  ###############

()===>
	
()===>

()===>
	
()===>

___________________________________________________________________

###############  ###############

()===>
	
()===>

()===>
	
()===>

___________________________________________________________________

###############  ###############

()===>
	
()===>

()===>
	
()===>

___________________________________________________________________

###############  ###############

()===>
	
()===>

()===>
	
()===>

___________________________________________________________________

###############  ###############

()===>
	
()===>

()===>
	
()===>

___________________________________________________________________

###############  ###############

()===>
	
()===>

()===>
	
()===>

___________________________________________________________________

###############  ###############

()===>
	
()===>

()===>
	
()===>

___________________________________________________________________

###############  ###############

()===>
	
()===>

()===>
	
()===>

___________________________________________________________________

###############  ###############

()===>
	
()===>

()===>
	
()===>

___________________________________________________________________

###############  ###############

()===>
	
()===>

()===>
	
()===>

___________________________________________________________________

###############  ###############

()===>
	
()===>

()===>
	
()===>

___________________________________________________________________

###############  ###############

()===>
	
()===>

()===>
	
()===>

___________________________________________________________________

###############  ###############

()===>
	
()===>

()===>
	
()===>

___________________________________________________________________

###############  ###############

()===>
	
()===>

()===>
	
()===>

___________________________________________________________________

###############  ###############

()===>
	
()===>

()===>
	
()===>

___________________________________________________________________

###############  ###############

()===>
	
()===>

()===>
	
()===>

___________________________________________________________________

###############  ###############

()===>
	
()===>

()===>
	
()===>

___________________________________________________________________

###############  ###############

()===>
	
()===>

()===>
	
()===>

___________________________________________________________________

###############  ###############

()===>
	
()===>

()===>
	
()===>

___________________________________________________________________

###############  ###############

()===>
	
()===>

()===>
	
()===>

___________________________________________________________________

###############  ###############

()===>
	
()===>

()===>
	
()===>

___________________________________________________________________

###############  ###############

()===>
	
()===>

()===>
	
()===>

___________________________________________________________________

###############  ###############

()===>
	
()===>

()===>
	
()===>

___________________________________________________________________

###############  ###############

()===>
	
()===>

()===>
	
()===>

___________________________________________________________________

###############  ###############

()===>
	
()===>

()===>
	
()===>

___________________________________________________________________

###############  ###############

()===>
	
()===>

()===>
	
()===>




