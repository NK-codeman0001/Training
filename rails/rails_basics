What is Rails?
Rails is a web application development framework written in the Ruby programming language.

The Rails philosophy includes two major guiding principles:

    Don't Repeat Yourself
    Convention Over Configuration
_____________________________________________________________________

################## Creating a New Rails Project ##################

(0)--> Install RVM
(1)--> Install Ruby
(2)--> Install PostgreSQL
(3)--> Install Rails

``` gem install rails ```

version check = rails --version

(4)--> ``` rails new blog ```
#This will create a Rails application called Blog in a blog directory and install the gem dependencies

(5)--> After you create the blog application, switch to its folder:
``` cd blog ```

<-------------------------------###--------------------------------> 

The blog directory will have a number of generated files and folders that make up the structure of a Rails application. Most of the work in this tutorial will happen in the app folder, but here's a basic rundown on the function of each of the files and folders that Rails creates by default:

File/Folder  ==>	Purpose

(*) app/ ==>		Contains the controllers, models, views, helpers, mailers, channels, jobs, and assets for your application. 

(*) bin/ ==>		Contains the rails script that starts your app and can contain other scripts you use to set up, update, deploy, or run your application.

(*) config/  ==>	Contains configuration for your application's routes, database, and more. This is covered in more detail in Configuring Rails Applications.

(*) config.ru   ==>		Rack configuration for Rack-based servers used to start the application. For more information about Rack, see the Rack website.

(*) db/	==>	Contains your current database schema, as well as the database migrations.
____________________________________________________________________

(*) Gemfile	Gemfile.lock   ==>	These files allow you to specify what gem dependencies are needed for your Rails application. These files are used by the Bundler gem. For more information about Bundler, see the Bundler website.

(*) lib/ 	==>	Extended modules for your application.

(*) log/ 	==>	Application log files.

(*) public/ 	==>	Contains static files and compiled assets. When your app is running, this directory will be exposed as-is.

(*) Rakefile 	==>	This file locates and loads tasks that can be run from the command line. The task definitions are defined throughout the components of Rails. Rather than changing Rakefile, you should add your own tasks by adding files to the lib/tasks directory of your application.

(*) README.md 	==>	This is a brief instruction manual for your application. You should edit this file to tell others what your application does, how to set it up, and so on.

(*) storage/ 	==>	Active Storage files for Disk Service. This is covered in Active Storage Overview.

(*) test/ 	==>	Unit tests, fixtures, and other test apparatus. These are covered in Testing Rails Applications.

(*) tmp/ 	==>	Temporary files (like cache and pid files).

(*) vendor/ 	==>	A place for all third-party code. In a typical Rails application this includes vendored gems.

(*) .gitattributes 	==>	This file defines metadata for specific paths in a git repository. This metadata can be used by git and other tools to enhance their behavior. See the gitattributes documentation for more information.

(*) .gitignore 	==>	This file tells git which files (or patterns) it should ignore. See GitHub - Ignoring files for more information about ignoring files.

(*) .ruby-version 	==>	This file contains the default Ruby version.

_____________________________________________________________________

################## Starting up the Web Server ##################
(1)--> bin/rails server
#When you want to stop the web server, hit Ctrl+C in the terminal window where it's running.

(2)--> in config/routes.rb

Rails.application.routes.draw do
  get "/articles", to: "articles#index"

  # For details on the DSL available within this file, see https://guides.rubyonrails.org/routing.html
end

___________
##The route above declares that GET /articles requests are mapped to the index action of ArticlesController.

(3)--> Create Controller
To create ArticlesController and its index action, we'll run the controller generator (with the --skip-routes option because we already have an appropriate route):

```bin/rails generate controller Articles index --skip-routes```

__________________________________________
##Rails will create several files for you:
create  app/controllers/articles_controller.rb
invoke  erb
create    app/views/articles
create    app/views/articles/index.html.erb
invoke  test_unit
create    test/controllers/articles_controller_test.rb
invoke  helper
create    app/helpers/articles_helper.rb
invoke    test_unit

 
(4)--> Open  app/controllers/articles_controller.rb

class ArticlesController < ApplicationController
  def index
  end
end
__________________
##The index action is empty. 
When an action does not explicitly render a view (or otherwise trigger an HTTP response), Rails will automatically render a view that matches the name of the controller and action. 

Convention Over Configuration! Views are located in the app/views directory. So the index action will render app/views/articles/index.html.erb by default.

(5)--> Open app/views/articles/index.html.erb, and replace its contents with:

<h1>Hello, Rails!</h1>

(6)--> Setting the Application Home Page

//open config/routes.rb 
Rails.application.routes.draw do
  root "articles#index"

  get "/articles", to: "articles#index"
end
 
(7)--> Start the server or refresh the page

_____________________________________________________________________

################## Autoloading ##################
Rails applications do not use require to load application code.

Application classes and modules are available everywhere, you do not need and should not load anything under app with require. This feature is called autoloading

You only need require calls for two use cases:

    To load files under the lib directory.
    To load gem dependencies that have require: false in the Gemfile.

_____________________________________________________________________

################## MVC (Model-View-Controller) ##################
MVC is a design pattern that divides the responsibilities of an application to make it easier to reason about. Rails follows this design pattern by convention.

(1)--> Generating a Model : 
A model is a Ruby class that is used to represent data. Additionally, models can interact with the application's database through a feature of Rails called Active Record.

To define a model, we will use the model generator:

	```bin/rails generate model Article title:string body:text```
_______________________________
This will create several files:

invoke  active_record
create    db/migrate/<timestamp>_create_articles.rb
create    app/models/article.rb
invoke    test_unit
create      test/models/article_test.rb
create      test/fixtures/articles.yml


(2)--> Database Migrations
Migrations are used to alter the structure of an application's database.

Let's take a look at the contents of our new migration file:

class CreateArticles < ActiveRecord::Migration[7.0]
  def change
    create_table :articles do |t|
      t.string :title
      t.text :body

      t.timestamps
    end
  end
end

______________________________
##By default, the create_table method adds an id column as an auto-incrementing primary key

## Inside the block for create_table, two columns are defined: title and body. These were added by the generator because we included them in our generate command (bin/rails generate model Article title:string body:text).

##On the last line of the block is a call to t.timestamps. This method defines two additional columns named created_at and updated_at.

(3)--> Let's run our migration with the following command:

``` bin/rails db:migrate ```

_____________________
## The command will display output indicating that the table was created:
==  CreateArticles: migrating ===================================
-- create_table(:articles)
   -> 0.0018s
==  CreateArticles: migrated (0.0018s) ==========================


(4)--> Using a Model to Interact with the Database
To play with our model a bit, we're going to use a feature of Rails called the console. The console is an interactive coding environment just like irb, but it also automatically loads Rails and our application code.

_______________
Let's launch the console with this command:
$ bin/rails console

_______________
At this prompt, we can initialize a new Article object:
irb> article = Article.new(title: "Hello Rails", body: "I am on Rails!")

______________
It's important to note that we have only initialized this object. This object is not saved to the database at all. It's only available in the console at the moment. To save the object to the database, we must call save:

irb> article.save
(0.1ms)  begin transaction
Article Create (0.4ms)  INSERT INTO "articles" ("title", "body", "created_at", "updated_at") VALUES (?, ?, ?, ?)  [["title", "Hello Rails"], ["body", "I am on Rails!"], ["created_at", "2020-01-18 23:47:30.734416"], ["updated_at", "2020-01-18 23:47:30.734416"]]
(0.9ms)  commit transaction
=> true
______________
irb> article
=> #<Article id: 1, title: "Hello Rails", body: "I am on Rails!", created_at: "2020-01-18 23:47:30", updated_at: "2020-01-18 23:47:30">

 The id, created_at, and updated_at attributes of the object are now set. Rails did this for us when we saved the object.
______________
When we want to fetch this article from the database, we can call find on the model and pass the id as an argument:

irb> Article.find(1)
=> #<Article id: 1, title: "Hello Rails", body: "I am on Rails!", created_at: "2020-01-18 23:47:30", updated_at: "2020-01-18 23:47:30">
______________
And when we want to fetch all articles from the database, we can call all on the model:

irb> Article.all
=> #<ActiveRecord::Relation [#<Article id: 1, title: "Hello Rails", body: "I am on Rails!", created_at: "2020-01-18 23:47:30", updated_at: "2020-01-18 23:47:30">]>
______________


(5)--> Showing a List of Articles

// in app/controllers/articles_controller.rb,and change the index action to fetch all articles from the database:

class ArticlesController < ApplicationController
  def index
    @articles = Article.all
  end
end
______________

(6)--> edit index.html.erb
<h1>Articles</h1>

<ul>
  <% @articles.each do |article| %>
    <li>
      <%= article.title %>
    </li>
  <% end %>
</ul>
______________
## The above code is a mixture of HTML and ERB. 
ERB is a templating system that evaluates Ruby code embedded in a document. 
Here, we can see two types of ERB tags: <% %> and <%= %>. 

The <% %> tag means "evaluate the enclosed Ruby code." 

The <%= %> tag means "evaluate the enclosed Ruby code, and output the value it returns." Anything you could write in a regular Ruby program can go inside these ERB tags, though it's usually best to keep the contents of ERB tags short, for readability.

## Since we don't want to output the value returned by @articles.each, we've enclosed that code in <% %>. But, since we do want to output the value returned by article.title (for each article), we've enclosed that code in <%= %>.


(7)--> Restart Server or Reload

<--()--> 
We can see the final result by visiting http://localhost:3000. (Remember that bin/rails server must be running!) Here's what happens when we do that:

   1. The browser makes a request: GET http://localhost:3000.
   2. Our Rails application receives this request.
   3. The Rails router maps the root route to the index action of ArticlesController.
   4. The index action uses the Article model to fetch all articles in the database.
   5. Rails automatically renders the app/views/articles/index.html.erb view.
   6. The ERB code in the view is evaluated to output HTML.
   7. The server sends a response containing the HTML back to the browser.
____________________________________________________________________

		ALSO READ CRUD NOTES BEFORE THAT
____________________________________________________________________

################## Adding a Second Model ##################

(1)--> Generating a Model

```
bin/rails generate model Comment commenter:string body:text article:references

```

(2)--> ake a look at app/models/comment.rb:

class Comment < ApplicationRecord
  belongs_to :article
end

##The (:references) keyword used in the shell command is a special data type for models. It creates a new column on your database table with the provided model name appended with an _id that can hold integer values. To get a better understanding, analyze the db/schema.rb file after running the migration.


(3)--> In addition to the model, Rails has also made a migration to create the corresponding database table:

//in app/db/migrations
class CreateComments < ActiveRecord::Migration[7.0]
  def change
    create_table :comments do |t|
      t.string :commenter
      t.text :body
      t.references :article, null: false, foreign_key: true

      t.timestamps
    end
  end
end

##The t.references line creates an integer column called article_id, an index for it, and a foreign key constraint that points to the id column of the articles table. 


(4)--> Go ahead and run the migration:
```
bin/rails db:migrate

```
## Rails is smart enough to only execute the migrations that have not already been run against the current database.

(5)--> Associating Models

Active Record associations let you easily declare the relationship between two models. In the case of comments and articles, you could write out the relationships this way:

    Each comment belongs to one article.
    One article can have many comments.

In fact, this is very close to the syntax that Rails uses to declare this association. You've already seen the line of code inside the Comment model (app/models/comment.rb) that makes each comment belong to an Article:

class Comment < ApplicationRecord
  belongs_to :article
end


(6)--> You'll need to edit app/models/article.rb to add the other side of the association:

class Article < ApplicationRecord
---------
  has_many :comments
---------
  validates :title, presence: true
  validates :body, presence: true, length: { minimum: 10 }
end


(7)--> Adding a Route for Comments
As with the articles controller, we will need to add a route so that Rails knows where we would like to navigate to see comments.

Open up the config/routes.rb file again, and edit it as follows:

Rails.application.routes.draw do
  root "articles#index"
--------
  resources :articles do
    resources :comments
  end
--------
end

##This creates comments as a nested resource within articles. This is another part of capturing the hierarchical relationship that exists between articles and comments.


(8)--> Generating a Controller

```
bin/rails generate controller Comments

```

(9)--> we'll wire up the Article show template (app/views/articles/show.html.erb) to let us make a new comment:

<h1><%= @article.title %></h1>

<p><%= @article.body %></p>

<ul>
  <li><%= link_to "Edit", edit_article_path(@article) %></li>
  <li><%= link_to "Destroy", article_path(@article), data: {
                    turbo_method: :delete,
                    turbo_confirm: "Are you sure?"
                  } %></li>
</ul>
------------
<h2>Add a comment:</h2>
<%= form_with model: [ @article, @article.comments.build ] do |form| %>
  <p>
    <%= form.label :commenter %><br>
    <%= form.text_field :commenter %>
  </p>
  <p>
    <%= form.label :body %><br>
    <%= form.text_area :body %>
  </p>
  <p>
    <%= form.submit %>
  </p>
<% end %>
------------

##This adds a form on the Article show page that creates a new comment by calling the CommentsController create action. The form_with call here uses an array, which will build a nested route, such as /articles/1/comments.


(10)--> Let's wire up the create in app/controllers/comments_controller.rb:


class CommentsController < ApplicationController
  def create
    @article = Article.find(params[:article_id])
    @comment = @article.comments.create(comment_params)
    redirect_to article_path(@article)
  end

  private
    def comment_params
      params.require(:comment).permit(:commenter, :body)
    end
end

##Each request for a comment has to keep track of the article to which the comment is attached, thus the initial call to the find method of the Article model to get the article in question.

##In addition, the code takes advantage of some of the methods available for an association. We use the create method on @article.comments to create and save the comment. This will automatically link the comment so that it belongs to that particular article.

(11)--> so let's add that to the app/views/articles/show.html.erb.
Once we have made the new comment, we send the user back to the original article using the article_path(@article) helper. As we have already seen, this calls the show action of the ArticlesController which in turn renders the show.html.erb template. This is where we want the comment to show, so let's add that to the app/views/articles/show.html.erb.


<h1><%= @article.title %></h1>

<p><%= @article.body %></p>

<ul>
  <li><%= link_to "Edit", edit_article_path(@article) %></li>
  <li><%= link_to "Destroy", article_path(@article), data: {
                    turbo_method: :delete,
                    turbo_confirm: "Are you sure?"
                  } %></li>
</ul>
-----------
<h2>Comments</h2>
<% @article.comments.each do |comment| %>
  <p>
    <strong>Commenter:</strong>
    <%= comment.commenter %>
  </p>

  <p>
    <strong>Comment:</strong>
    <%= comment.body %>
  </p>
<% end %>
------------
<h2>Add a comment:</h2>
<%= form_with model: [ @article, @article.comments.build ] do |form| %>
  <p>
    <%= form.label :commenter %><br>
    <%= form.text_field :commenter %>
  </p>
  <p>
    <%= form.label :body %><br>
    <%= form.text_area :body %>
  </p>
  <p>
    <%= form.submit %>
  </p>
<% end %>

____________________________________________________________________

################## Refactoring ##################
Now that we have articles and comments working, take a look at the app/views/articles/show.html.erb template. It is getting long and awkward. We can use partials to clean it up.

(1)--> Rendering Partial Collections
we will make a comment partial to extract showing all the comments for the article. Create the file app/views/comments/_comment.html.erb and put the following into it:

<p>
  <strong>Commenter:</strong>
  <%= comment.commenter %>
</p>

<p>
  <strong>Comment:</strong>
  <%= comment.body %>
</p>


(2)--> Then you can change app/views/articles/show.html.erb to look like the following:
<h1><%= @article.title %></h1>

<p><%= @article.body %></p>

<ul>
  <li><%= link_to "Edit", edit_article_path(@article) %></li>
  <li><%= link_to "Destroy", article_path(@article), data: {
                    turbo_method: :delete,
                    turbo_confirm: "Are you sure?"
                  } %></li>
</ul>

<h2>Comments</h2>
----------
<%= render @article.comments %>
----------
<h2>Add a comment:</h2>
<%= form_with model: [ @article, @article.comments.build ] do |form| %>
  <p>
    <%= form.label :commenter %><br>
    <%= form.text_field :commenter %>
  </p>
  <p>
    <%= form.label :body %><br>
    <%= form.text_area :body %>
  </p>
  <p>
    <%= form.submit %>
  </p>
<% end %>


(3)--> Rendering a Partial Form
create a file app/views/comments/_form.html.erb containing:

<%= form_with model: [ @article, @article.comments.build ] do |form| %>
  <p>
    <%= form.label :commenter %><br>
    <%= form.text_field :commenter %>
  </p>
  <p>
    <%= form.label :body %><br>
    <%= form.text_area :body %>
  </p>
  <p>
    <%= form.submit %>
  </p>
<% end %>


(4)--> Then you make the app/views/articles/show.html.erb look like the following:

<h1><%= @article.title %></h1>

<p><%= @article.body %></p>

<ul>
  <li><%= link_to "Edit", edit_article_path(@article) %></li>
  <li><%= link_to "Destroy", article_path(@article), data: {
                    turbo_method: :delete,
                    turbo_confirm: "Are you sure?"
                  } %></li>
</ul>

<h2>Comments</h2>
<%= render @article.comments %>

<h2>Add a comment:</h2>
---------
<%= render 'comments/form' %>
---------
____________________________________________________________________

################## Using Concerns ##################

(1)-->First, let's run the following migrations to add status to Articles and Comments:

$ bin/rails generate migration AddStatusToArticles status:string
$ bin/rails generate migration AddStatusToComments status:string


(2)--> next, let's update the database with the generated migrations:

$ bin/rails db:migrate

(3)--> We also have to permit the :status key as part of the strong parameter, in app/controllers/articles_controller.rb:

  private
    def article_params
      params.require(:article).permit(:title, :body, :status)
    end


(4)--> and in app/controllers/comments_controller.rb:
  private
    def comment_params
      params.require(:comment).permit(:commenter, :body, :status)
    end


(5)--> In article model:

class Article < ApplicationRecord
  has_many :comments

  validates :title, presence: true
  validates :body, presence: true, length: { minimum: 10 }
-----------
  VALID_STATUSES = ['public', 'private', 'archived']

  validates :status, inclusion: { in: VALID_STATUSES }

  def archived?
    status == 'archived'
  end
----------
end


(6)--> and in the Comment model:
class Comment < ApplicationRecord
  belongs_to :article
-------
  VALID_STATUSES = ['public', 'private', 'archived']

  validates :status, inclusion: { in: VALID_STATUSES }

  def archived?
    status == 'archived'
  end
-------
end


(7)--> Then, in our index action template (app/views/articles/index.html.erb) we would use the archived? method to avoid displaying any article that is archived:

<h1>Articles</h1>

<ul>
  <% @articles.each do |article| %>
-------
    <% unless article.archived? %>
      <li>
        <%= link_to article.title, article %>
      </li>
    <% end %>
-------
  <% end %>
</ul>

<%= link_to "New Article", new_article_path %>


(8)-->  Similarly, in our comment partial view (app/views/comments/_comment.html.erb) we would use the archived? method to avoid displaying any comment that is archived:

<% unless comment.archived? %>
  <p>
    <strong>Commenter:</strong>
    <%= comment.commenter %>
  </p>

  <p>
    <strong>Comment:</strong>
    <%= comment.body %>
  </p>
<% end %>

--------------------------------------------------------------------
However, if you look again at our models now, you can see that the logic is duplicated. If in the future we increase the functionality of our blog - to include private messages, for instance - we might find ourselves duplicating the logic yet again. This is where concerns come in handy.

A concern is only responsible for a focused subset of the model's responsibility; the methods in our concern will all be related to the visibility of a model. Let's call our new concern (module) Visible. We can create a new file inside app/models/concerns called visible.rb , and store all of the status methods that were duplicated in the models.
--------------------------------------------------------------------

(9)--> In app/models/concerns/visible.rb

module Visible
  extend ActiveSupport::Concern

  VALID_STATUSES = ['public', 'private', 'archived']

  included do
    validates :status, inclusion: { in: VALID_STATUSES }
  end

  def archived?
    status == 'archived'
  end
end


##Now, we can remove the duplicated logic from each model and instead include our new Visible module:

(10)--> In app/models/article.rb:

class Article < ApplicationRecord
-------
  include Visible
-------
  has_many :comments

  validates :title, presence: true
  validates :body, presence: true, length: { minimum: 10 }
end


(11)-->  and in app/models/comment.rb:
class Comment < ApplicationRecord
-------
  include Visible
-------
  belongs_to :article
end

(12)--> Class methods can also be added to concerns.

If we want to display a count of public articles or comments on our main page, we might add a class method to Visible as follows:

module Visible
  extend ActiveSupport::Concern

  VALID_STATUSES = ['public', 'private', 'archived']

  included do
    validates :status, inclusion: { in: VALID_STATUSES }
  end

  class_methods do
    def public_count
      where(status: 'public').count
    end
  end

  def archived?
    status == 'archived'
  end
end

 
(13)--> Then in the view, you can call it like any class method:

<h1>Articles</h1>

Our blog has <%= Article.public_count %> articles and counting!

<ul>
  <% @articles.each do |article| %>
    <% unless article.archived? %>
      <li>
        <%= link_to article.title, article %>
      </li>
    <% end %>
  <% end %>
</ul>

<%= link_to "New Article", new_article_path %>


(14)--> To finish up, we will add a select box to the forms, and let the user select the status when they create a new article or post a new comment. We can also specify the default status as public. In app/views/articles/_form.html.erb, we can add:

<div>
  <%= form.label :status %><br>
  <%= form.select :status, ['public', 'private', 'archived'], selected: 'public' %>
</div>


(15)-->and in app/views/comments/_form.html.erb:
<p>
  <%= form.label :status %><br>
  <%= form.select :status, ['public', 'private', 'archived'], selected: 'public' %>
</p>
 
____________________________________________________________________

################## Deleting Comments ##################
Another important feature of a blog is being able to delete spam comments. To do this, we need to implement a link of some sort in the view and a destroy action in the CommentsController.

(1)--> So first, let's add the delete link in the app/views/comments/_comment.html.erb partial:

<% unless comment.archived? %>
  <p>
    <strong>Commenter:</strong>
    <%= comment.commenter %>
  </p>

  <p>
    <strong>Comment:</strong>
    <%= comment.body %>
  </p>

  <p>
--------
    <%= link_to "Destroy Comment", [comment.article, comment], data: {
                  turbo_method: :delete,
                  turbo_confirm: "Are you sure?"
                } %>
--------
  </p>
<% end %>

##Clicking this new "Destroy Comment" link will fire off a DELETE
/articles/:article_id/comments/:id to our CommentsController, which can then use this to find the comment we want to delete, 

(2)--> so let's add a destroy action to our controller (app/controllers/comments_controller.rb):

class CommentsController < ApplicationController
  def create
    @article = Article.find(params[:article_id])
    @comment = @article.comments.create(comment_params)
    redirect_to article_path(@article)
  end
--------
  def destroy
    @article = Article.find(params[:article_id])
    @comment = @article.comments.find(params[:id])
    @comment.destroy
    redirect_to article_path(@article), status: :see_other
  end
--------
  private
    def comment_params
      params.require(:comment).permit(:commenter, :body, :status)
    end
end

##The destroy action will find the article we are looking at, locate the comment within the @article.comments collection, and then remove it from the database and send us back to the show action for the article.

(3)--> Deleting Associated Objects
If you delete an article, its associated comments will also need to be deleted, otherwise they would simply occupy space in the database. Rails allows you to use the dependent option of an association to achieve this.

Modify the Article model, app/models/article.rb, as follows:

class Article < ApplicationRecord
  include Visible
--------
  has_many :comments, dependent: :destroy
--------
  validates :title, presence: true
  validates :body, presence: true, length: { minimum: 10 }
end

 
____________________________________________________________________

################## Security ##################

Basic Authentication

If you were to publish your blog online, anyone would be able to add, edit and delete articles or delete comments.

Rails provides an HTTP authentication system that will work nicely in this situation.

In the ArticlesController we need to have a way to block access to the various actions if the person is not authenticated. Here we can use the Rails http_basic_authenticate_with method, which allows access to the requested action if that method allows it.

To use the authentication system, we specify it at the top of our ArticlesController in app/controllers/articles_controller.rb. In our case, we want the user to be authenticated on every action except index and show, so we write that:

(1)--> in app/controllers/articles_controller.rb

class ArticlesController < ApplicationController

  http_basic_authenticate_with name: "dhh", password: "secret", except: [:index, :show]

  def index
    @articles = Article.all
  end

  # snippet for brevity


(2)-->We also want to allow only authenticated users to delete comments, so in the CommentsController (app/controllers/comments_controller.rb) we write:
class CommentsController < ApplicationController

  http_basic_authenticate_with name: "dhh", password: "secret", only: :destroy

  def create
    @article = Article.find(params[:article_id])
    # ...
  end

  # snippet for brevity



##After entering the correct username and password, you will remain authenticated until a different username and password is required or the browser is closed.

##Other authentication methods are available for Rails applications. Two popular authentication add-ons for Rails are the Devise rails engine and the Authlogic gem, along with a number of others.

____________________________________________________________________

################## END ##################

