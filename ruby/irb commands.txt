$ irb
_____________________________________________________________________________________
//stdout commands
_____________________________________________________________________________________
print "hello system"
hello system => nil 

puts "hello system"	#print + \n
hello system
 => nil       
 
putc "hello system"    #print on first char
h => "hello system" 

//variables
emp_name="Neeraj"      #string Class
 => "Neeraj" 
emp_name.class
 => String 

emp_id = 101		#integer class
 => 101 
emp_id.class
 => Integer 

isMale = true		# Trueclass
 => true 
isMale.class
 => TrueClass 

isMarried = false	# Falseclass
 => false 
isMarried.class
 => FalseClass 

leaves = nil		# Nilclass
 => nil 
leaves.class
 => NilClass 
leaves.nil?
 => true

_____________________________________________________________________________________
//strings
_____________________________________________________________________________________
emp_name = "Neeraj Kumar"
 => "Neeraj Kumar" 
puts emp_name
Neeraj Kumar
 => nil                                      

########## Using indexes in String ###########
puts emp_name.length
12
 => nil                                                    

> puts emp_name[0]
N
 => nil                                                    

> puts emp_name[12]

 => nil                                                    

> puts emp_name[11]
r
 => nil 

> puts emp_name[1,4]         #it will print 4 char from index 1
eera
 => nil                                                    

> puts emp_name[2,4]	    #it will print 4 char from index 2
eraj
 => nil

> puts emp_name.index("N")    #it return index of first matching char from left to right
0
 => nil                                                    

> puts emp_name.index("E")

 => nil                                                    

> puts emp_name.index("e")
1
 => nil 

> puts emp_name.index("a")
4
 => nil 

> puts emp_name.index("K")
7
 => nil 
 
 > puts emp_name.index("ee")
1
 => nil 

########## Escape Characters in String ###########
emp_name = "Neeraj-Kumar"
 => "Neeraj-Kumar" 
puts emp_name
Neeraj-Kumar
 => nil                                      

emp_name = "Neeraj/nKumar"
 => "Neeraj/nKumar" 
puts emp_name
Neeraj/nKumar
 => nil                                      

emp_name = "Neeraj\nKumar"
 => "Neeraj\nKumar" 
puts emp_name
Neeraj
Kumar
 => nil 

puts "Neeraj\nKumar" 			#to print in newline
Neeraj
Kumar                                        
 => nil 

emp_name = "Neeraj\"Kumar"		#'\' escape charater to print '"'
 => "Neeraj\"Kumar" 
puts emp_name
Neeraj"Kumar
 => nil 

########## Upper Case the String ###########
emp_name = "Neeraj Kumar"
 => "Neeraj Kumar" 
> puts emp_name.upcase
NEERAJ KUMAR
 => nil                                          
> puts emp_name.upcase()
NEERAJ KUMAR
 => nil  

########## Down Case the String ###########
> puts emp_name.downcase
neeraj kumar
 => nil     

########## Stripe Function ###########
emp_name = "     Neeraj Kumar     "
 => "     Neeraj Kumar     " 
> puts emp_name
     Neeraj Kumar     
 => nil 

> puts emp_name.strip		# remove extra spaces at start and end of string
Neeraj Kumar
 => nil  
 
emp_name = "     Neeraj     Kumar     "
 => "     Neeraj     Kumar     " 
> puts emp_name.strip
Neeraj     Kumar
 => nil
       
########## Length of String ###########
emp_name = "     Neeraj     Kumar     "
 => "     Neeraj     Kumar     " 
> puts emp_name.length
26
 => nil                                                    

> puts emp_name.strip.length
16
 => nil                                                               
                                                           
########## Include Method in String ###########
> puts emp_name.include? "kumar"
false
 => nil                                                               
> puts emp_name.include? "Kumar"
true
 => nil 

_____________________________________________________________________________________
Math & Numbers
_____________________________________________________________________________________

########## Math operators ###########
> 2-3
 => -1 

> 3-3
 => 0 

> 3*3
 => 9 

> 3**3
 => 27 

> 3**4
 => 81 

> 9/2
 => 4 

> 9.0/2
 => 4.5 

> 9/2.0
 => 4.5 

> 9%2
 => 1 

> 9.0%2
 => 1.0 

> 9%2.0
 => 1.0 

########## Numbers ###########
emp_id = 101
puts ("emp id :  #{emp_id}")

emp_id = -101
puts ("emp id : "+emp_id.to_s)

puts emp_id.abs       ##absolute functions
puts emp_id.abs()

puts emp_id.round()
puts emp_id.ceil()
puts emp_id.floor()

puts Math.sqrt(36)
puts Math.log(36)   ##sin,cos, etc is also there

_____________________________________________________________________________________
Getting Inputs
_____________________________________________________________________________________
########## gets ###########
when we store input in a variable and press enter, a newline also get store in it.

name = gets
puts "hello " + name + ", Good Morning"
=> 
Neeraj
hello Neeraj
, Good Morning
              
to remove the extra newline stored with the variable use .chomp() function
name = gets
puts "hello " + name.chomp() + ", Good Morning"
=>
Neeraj
hello Neeraj, Good Morning
b
_____________________________________________________________________________________
Arrays
_____________________________________________________________________________________
########## [] ###########
friends = Array[1,2.3,"Ram"]
or
friends = Array.new
friends[0]=1
friends[1]=3.3
friends[2] ="Ram"

########## puts ###########
puts friends   	##prints every element of array in new line
puts friends[0]  ##prints 1st element of array in
puts friends[0,2] 	##prints 2 element from 0 index of array in new line

########## methods ###########
friends.length()
friends.include? "Ram"     #case sensitive
friends.reverse()
friends.sort()       ##it will work only when all element have same data types

_____________________________________________________________________________________
Hashes (map in C++, dictonary in python)
_____________________________________________________________________________________
########## [] ###########
states = {
	:PN => "Punjab"
	"DL" => "Delhi"
	1 => "Haryana"
	}

########## puts ###########
puts states
puts states[1]
puts states["DL"]
puts states[:PN]

_____________________________________________________________________________________
Methods (functions)
_____________________________________________________________________________________
########## [] ###########
3.2.1 :006 > def sayhi
3.2.1 :007 >   puts "Hi, Good Morning"
3.2.1 :008 > end
 => :sayhi 
3.2.1 :012 > sayhi.class   	##it prints NilClass because return type is void
Hi, Good Morning
 => NilClass


3.2.1 :013 > def sayhi(name,age)
3.2.1 :014 >   puts ("Hello, #{name}. Your age is #{age}")
3.2.1 :015 > end
 => :sayhi 
3.2.1 :016 > sayhi("Neeraj",22)
Hello, Neeraj. Your age is 22
 => nil       


3.2.1 :019 > def sayhi(name="Unkown",age=-1)
3.2.1 :020 >   puts ("Hello, #{name}. Your age is #{age}")
3.2.1 :021 > end
 => :sayhi 
3.2.1 :022 > sayhi
Hello, Unkown. Your age is -1
 => nil 
 
 ## returning a value
3.2.1 :029 > def cube(num)
3.2.1 :030 >   num*num*num
3.2.1 :031 > end
 => :cube 
3.2.1 :032 > cube(5)
 => 125 
 
 or
  
##using return statatement
3.2.1 :029 > def cube(num)
3.2.1 :030 >   return num*num*num
3.2.1 :031 > end
 => :cube 
3.2.1 :032 > cube(5)
 => 125 

3.2.1 :036 > def cube(num)
3.2.1 :037 >  return num*num*num,num
3.2.1 :038 > end
 => :cube 
3.2.1 :039 > cube(5)
 => [125, 5] 
3.2.1 :040 > cube(5)[0]
 => 125 
3.2.1 :041 > cube(5)[1]
 => 5 

_____________________________________________________________________________________
if .. else.. statements
_____________________________________________________________________________________
########## [] ###########
3.2.1 :042 > ismale = true
 => true 
3.2.1 :043 > istall = false
 => false 
3.2.1 :044 > if ismale and istall
3.2.1 :045 >   puts "You are a tall male"
3.2.1 :046 > elsif ismale and !istall
3.2.1 :047 >   puts "You are a short male"
3.2.1 :048 > elsif !ismale and istall
3.2.1 :049 >   puts "You are tall but not male"
3.2.1 :050 > else
3.2.1 :051 >   puts "You are neihter tall nor male"
3.2.1 :052 > end
You are a short male
 => nil          

_____________________________________________________________________________________
case statements
_____________________________________________________________________________________
########## [] ###########
3.2.1 :058 > abr = "HR"
 => "HR" 
3.2.1 :059 > case abr
3.2.1 :060 > when "HR"
3.2.1 :061 >   state = "Haryana"
3.2.1 :062 > when "PN"
3.2.1 :063 >   state = "Punjab"
3.2.1 :064 > when "UP"
3.2.1 :065 >   state = "Uttar Pradesh"
3.2.1 :066 > else
3.2.1 :067 >   state = "Invalid State Abbrevation"
3.2.1 :068 > end
 => "Haryana" 

_____________________________________________________________________________________
while loop
_____________________________________________________________________________________
########## [] ###########



