_____________________________________________________________________________________
Hashes (map in C++, dictonary in python)
_____________________________________________________________________________________
########## [] ###########
states = {
	:PN => "Punjab"
	"DL" => "Delhi"
	1 => "Haryana"
	}
	
Alternatively, but only for a Hash key that’s a Symbol, you can use a newer JSON-style syntax, where each bareword becomes a Symbol:
**BEST**
h = {foo: 0, bar: 1, baz: 2}
h # => {:foo=>0, :bar=>1, :baz=>2}

But it’s an error to try the JSON-style syntax for a key that’s not a bareword or a String:

# Raises SyntaxError (syntax error, unexpected ':', expecting =>):
h = {0: 'zero'}

h = {foo: 0, bar: 1, baz: 2}
h[:bat] = 3 # => 3
h # => {:foo=>0, :bar=>1, :baz=>2, :bat=>3}
h[:foo] = 4 # => 4
h # => {:foo=>4, :bar=>1, :baz=>2, :bat=>3}

The simplest way to delete a Hash entry (instance method delete):

h = {foo: 0, bar: 1, baz: 2}
h.delete(:bar) # => 1
h # => {:foo=>0, :baz=>2}

########## puts ###########
puts states
puts states[1]
puts states["DL"]
puts states[:PN]

########## Default Values ###########
counts = {foo: 42}
counts.default # => nil (default)
counts[:foo] = 42
counts[:bar] # => nil
counts.default = 0
counts[:bar] # => 0
counts.values_at(:foo, :bar, :baz) # => [42, 0, 0]
counts.dig(:bar) # => 0


########## Methods for Creating a Hash ###########

    ::[]: Returns a new hash populated with given objects.
    
(*)=> 	Hash[] → new_empty_hash
With no argument, returns a new empty Hash.

(*)=> 	Hash[hash] → new_hash
h = {foo: 0, bar: 1, baz: 2}
Hash[h] # => {:foo=>0, :bar=>1, :baz=>2}

(*)=> 	Hash[ [*2_element_arrays] ] → new_hash
Hash[ [ [:foo, 0], [:bar, 1] ] ] # => {:foo=>0, :bar=>1}

(*)=> 	Hash[*objects] → new_hash
Hash[:foo, 0, :bar, 1] # => {:foo=>0, :bar=>1}
_____________________________________________________________________
      
    ::new: Returns a new empty hash.

(*)=> 	Hash.new(default_value = nil) → new_hash
h = Hash.new
h.default # => nil
h.default_proc # => nil

h = Hash.new(false)
h.default # => false
h.default_proc # => nil
h.default_proc.class	# => NilClass
h[:nosuch] 	# => false 

If a block given but no argument, stores the block as the default proc and sets the default value to nil:

(*)=> 	Hash.new {|hash, key| ... } → new_hash

Example
h = Hash.new {|hash, key| "Default value for #{key}" }
h.default # => nil
h.default_proc	# => #<Proc:0x00007f31d92c9400 (irb):1>
h.default_proc.class # => Proc
h[:nosuch] # => "Default value for nosuch"
_______________________________________________________________________


    ::try_convert: Returns a new hash created from a given object.

If obj is a Hash object, returns obj.
Otherwise if obj responds to :to_hash, calls obj.to_hash and returns the result.
Returns nil if obj does not respond to :to_hash
Raises an exception unless obj.to_hash returns a Hash object.
_______________________________________________________________________


########## Methods for Setting Hash State ###########


    compare_by_identity: Sets self to consider only identity in comparing keys.

(*)=> 	hash.compare_by_identity → self

s0 = 'x'
s1 = 'x'
h = {}
h.compare_by_identity? # => false
h[s0] = 0
h[s1] = 1
h # => {"x"=>1}

***After calling #compare_by_identity, the keys are considered to be different, and therefore do not overwrite each other:***

Example
h = {}
h.compare_by_identity # => {}
h.compare_by_identity? # => true
h[s0] = 0
h[s1] = 1
h # => {"x"=>0, "x"=>1}
_______________________________________________________________________


    default=: Sets the default to a given value.

(*)=> 	hash.default = value → object

Sets the default value to value; returns value:
Example
h = {}
h.default # => nil
h.default = false # => false
h.default # => false
_______________________________________________________________________

    default_proc=: Sets the default proc to a given proc.

(*)=> 	hash.default_proc = proc → proc

Sets the default proc for self to proc: (see Default Values):
Example
h = {}
h.default_proc # => nil
h.default_proc = proc { |hash, key| "Default value for #{key}" }
h.default_proc.class # => Proc

h.default_proc = nil
h.default_proc # => nil
_______________________________________________________________________

    rehash: Rebuilds the hash table by recomputing the hash index for each key. 
Modifying a Hash key while it is in use damages the hash’s index.

This Hash has keys that are Arrays:
Example

a0 = [ :foo, :bar ]
a1 = [ :baz, :bat ]
h = {a0 => 0, a1 => 1}
h.include?(a0) # => true
h[a0] # => 0
a0.hash # => 110002110

Modifying array element a0[0] changes its hash value:
Example

a0[0] = :bam
a0.hash # => 1069447059

And damages the Hash index:
Example

h.include?(a0) # => false
h[a0] # => nil

You can repair the hash index using method rehash:
Example

h.rehash # => {[:bam, :bar]=>0, [:baz, :bat]=>1}
h.include?(a0) # => true
h[a0] # => 0

A String key is always safe. That’s because an unfrozen String passed as a key will be replaced by a duplicated and frozen String:
Example

s = 'foo'
s.frozen? # => false
h = {s => 0}
first_key = h.keys.first
first_key.frozen? # => true
_______________________________________________________________________

########## Methods for Querying ###########


    any?: Returns whether any element satisfies a given criterion.

(*)=> hash.any? → true or false

With no argument and no block, returns true if self is non-empty; false if empty.

(*)=> hash.any?(object) → true or false

With argument object and no block, returns true if for any key key h.assoc(key) == object:

h = {foo: 0, bar: 1, baz: 2}
h.any?([:bar, 1]) # => true
h.any?([:bar, 0]) # => false
h.any?([:baz, 1]) # => false

(*)=> hash.any? {|key, value| ... } → true or false

With no argument and a block, calls the block with each key-value pair; returns true if the block returns any truthy value, false otherwise:

Example
h = {foo: 0, bar: 1, baz: 2}
h.any? {|key, value| value < 3 } # => true
h.any? {|key, value| value > 3 } # => false	
_____________________________________________________________________
      
    compare_by_identity?: Returns whether the hash considers only identity when comparing keys.

Returns true if compare_by_identity has been called, false otherwise.

Example
s0 = 'x'
s1 = 'x'
h = {}
h.compare_by_identity? # => false
h[s0] = 0
h[s1] = 1
h # => {"x"=>1}

After calling #compare_by_identity, the keys are considered to be different, and therefore do not overwrite each other:

Example
h = {}
h.compare_by_identity # => {}
h.compare_by_identity? # => true
h[s0] = 0
h[s1] = 1
h # => {"x"=>0, "x"=>1}	
_____________________________________________________________________
      

    default: Returns the default value, or the default value for a given key.

(*)=> hash.default → object
h = {}
h.default # => nil

(*)=> hash.default(key) → object

h = Hash.new { |hash, key| hash[key] = "No key #{key}"}
h[:foo] = "Hello"
h.default(:foo) # => "No key foo"	
_____________________________________________________________________
      

    default_proc: Returns the default proc.

(*)=> hash.default_proc → proc or nil
h = {}
h.default_proc # => nil
h.default_proc = proc {|hash, key| "Default value for #{key}" }
h.default_proc.class # => Proc
_____________________________________________________________________
      
    empty?: Returns whether there are no entries.
	
{}.empty? # => true
{foo: 0, bar: 1, baz: 2}.empty? # => false
_____________________________________________________________________
      
    eql?: Returns whether a given object is equal to self.

    Returns true if all of the following are true:
    object is a Hash object.
    hash and object have the same keys (regardless of order).
    For each key key, h[key] eql? object[key]. 

Otherwise, returns false.

h1 = {foo: 0, bar: 1, baz: 2}
h2 = {foo: 0, bar: 1, baz: 2}
h1.eql? h2 # => true
h3 = {baz: 2, bar: 1, foo: 0}
h1.eql? h3 # => true

_____________________________________________________________________
      

    hash: Returns the integer hash code.

Two Hash objects have the same hash-code if their content is the same (regardless or order):

Example
h1 = {foo: 0, bar: 1, baz: 2}
h2 = {baz: 2, bar: 1, foo: 0}
h2.hash == h1.hash # => true
h2.eql? h1 # => true
	
_____________________________________________________________________
      
    has_value?: Returns whether a given object is a value in self.

h			# => {:foo=>0, :bar=>1, :baz=>2} 
h.has_value?(2)		# => true 
h.has_value?(22)	# => false 
_____________________________________________________________________
      
    include?, has_key?, member?, key?: Returns whether a given object is a key in self.
h	 		#=> {:foo=>0, :bar=>1, :baz=>2} 
h.include?(2)		# => false 
h.include?(22)		# => false  
h.include?(:foo)	# => true  

h.has_key?(2)		# => false 
h.has_key?(22)		# => false  
h.has_key?(:foo)	# => true 

h.member?(:foo)	# => true

h.key?(:foo)	# => true    
_____________________________________________________________________
      
    length, size: Returns the count of entries.

{foo: 0, bar: 1, baz: 2}.length # => 3	
_____________________________________________________________________
      
    value?: Returns whether a given object is a value in self. 

h.value?(2)	# => true 
h.value?(:foo)	# => false 
_____________________________________________________________________
      
########## Methods for Comparing ###########


    <: Returns whether self is a proper subset of a given object.
h1 = {foo: 0, bar: 1}
h2 = {foo: 0, bar: 1, baz: 2}
h1 < h2 # => true
h2 < h1 # => false
**h1 < h1 # => false	**
_____________________________________________________________________
      
    <=: Returns whether self is a subset of a given object.
h1 = {foo: 0, bar: 1}
h2 = {foo: 0, bar: 1, baz: 2}
h1 <= h2 # => true
h2 <= h1 # => false
**h1 <= h1 # => true**
_____________________________________________________________________
      
    ==: Returns whether a given object is equal to self.
Returns true if all of the following are true:
    object is a Hash object.
    hash and object have the same keys (regardless of order).
    For each key key, hash[key] == object[key]. 

Otherwise, returns false.	

h1 = {foo: 0, bar: 1, baz: 2}
h2 = {foo: 0, bar: 1, baz: 2}
h1 == h2 # => true
h3 = {baz: 2, bar: 1, foo: 0}
h1 == h3 # => true

_____________________________________________________________________

    >: Returns whether self is a proper superset of a given object

h1 = {foo: 0, bar: 1, baz: 2}
h2 = {foo: 0, bar: 1}
h1 > h2 # => true
h2 > h1 # => false
h1 > h1 # => false	
_____________________________________________________________________

    >=: Returns whether self is a superset of a given object. 

h1 = {foo: 0, bar: 1, baz: 2}
h2 = {foo: 0, bar: 1}
h1 >= h2 # => true
h2 >= h1 # => false
h1 >= h1 # => true	
_____________________________________________________________________

########## Methods for Fetching ###########


    []: Returns the value associated with a given key.
h = {foo: 0, bar: 1, baz: 2}
h[:foo] # => 0

h = {foo: 0, bar: 1, baz: 2}
h[:nosuch] # => nil
   
_____________________________________________________________________
      
    dig: Returns the object in nested objects that is specified by a given key and additional arguments.

Nested Hashes:
h = {foo: {bar: {baz: 2}}}
h.dig(:foo) # => {:bar=>{:baz=>2}}
h.dig(:foo, :bar) # => {:baz=>2}
h.dig(:foo, :bar, :baz) # => 2
h.dig(:foo, :bar, :BAZ) # => nil

Nested Hashes and Arrays:
h = {foo: {bar: [:a, :b, :c]}}
h.dig(:foo, :bar, 2) # => :c

This method will use the default values for keys that are not present:
h = {foo: {bar: [:a, :b, :c]}}
h.dig(:hello) # => nil
h.default_proc = -> (hash, _key) { hash }
h.dig(:hello, :world) # => h
h.dig(:hello, :world, :foo, :bar, 2) # => :c    
_____________________________________________________________________

    fetch: Returns the value for a given key.
  
(*)=> hash.fetch(key) → object
Returns the value for the given key, if found.
h = {foo: 0, bar: 1, baz: 2}
h.fetch(:bar) # => 1


h.fetch(:nosuch)
(irb):64:in `fetch': key not found: :nosuch (KeyError)


(*)=> hash.fetch(key, default_value) → object
If key is not found and no block was given, returns default_value:
h.fetch(:nosuch, 'this is default')	# => "this is default"
{}.fetch(:nosuch, :default) # => :default


(*)=> hash.fetch(key) {|key| ... } → object
If key is not found and a block was given, yields key to the block and returns the block’s return value:
{}.fetch(:nosuch) {|key| "No key #{key}"} # => "No key nosuch"


Raises KeyError if neither default_value nor a block was given.

Note that this method does not use the values of either default or default_proc.  
_____________________________________________________________________

    fetch_values: Returns array containing the values associated with given keys.
 
(*)=> hash.fetch_values(*keys) → new_array
h = {foo: 0, bar: 1, baz: 2}
h.fetch_values(:baz, :foo) # => [2, 0]

Returns a new empty Array if no arguments given.

(*)=> hash.fetch_values(*keys) {|key| ... } → new_array
When a block is given, calls the block with each missing key, treating the block’s return value as the value for that key:

h = {foo: 0, bar: 1, baz: 2}
values = h.fetch_values(:bar, :foo, :bad, :bam) {|key| key.to_s}
values # => [1, 0, "bad", "bam"]

When no block is given, raises an exception if any given key is not found.
_____________________________________________________________________

    key: Returns the key for the first-found entry with a given value.

h = {foo: 0, bar: 2, baz: 2}
h.key(0) # => :foo
h.key(2) # => :bar

Returns nil if so such value is found.   
h.key(33)	# => nil 
h.key(:foo)	# => nil 
_____________________________________________________________________

    keys: Returns an array containing all keys in self.

h = {foo: 0, bar: 1, baz: 2}
h.keys # => [:foo, :bar, :baz]   
_____________________________________________________________________

    values: Returns an array containing all values in self/

h = {foo: 0, bar: 1, baz: 2}
h.values # => [0, 1, 2]    
_____________________________________________________________________
      
    assoc: Returns a 2-element array containing a given key and its value.
 h = {foo: 0, bar: 1, baz: 2}
h.assoc(:bar) # => [:bar, 1]

Returns nil if key key is not found.
h.assoc(:nosuch)	# => nil
_____________________________________________________________________

    rassoc: Returns a 2-element array consisting of the key and value of the first-found entry having a given value.

h = {foo: 0, bar: 1, baz: 1}
h.rassoc(1) # => [:bar, 1]    
_____________________________________________________________________

    values_at: Returns an array containing values for given keys. 
h = {foo: 0, bar: 1, baz: 2}
h.values_at(:baz, :foo) # => [2, 0]

The default values are returned for any keys that are not found:
h.values_at(:hello, :foo) # => [nil, 0]   
_____________________________________________________________________

########## Methods for Assigning ###########

    []=, store: Associates a given key with a given value.

h = {foo: 0, bar: 1}
h[:foo] = 2 # => 2
h.store(:bar, 3) # => 3
h # => {:foo=>2, :bar=>3}

If key does not exist, adds the key and value; the new entry is last in the order (see Entry Order):
Example

h = {foo: 0, bar: 1}
h[:baz] = 2 # => 2
h.store(:bat, 3) # => 3
h # => {:foo=>0, :bar=>1, :baz=>2, :bat=>3}	
_____________________________________________________________________

    merge: Returns the hash formed by merging each given hash into a copy of self.

With arguments and no block:
    Returns the new Hash object formed by merging each successive Hash in other_hashes into self.
    Each new-key entry is added at the end.
    Each duplicate-key entry’s value overwrites the previous value
    
(*)=> hash.merge(*other_hashes) → new_hash
h = {foo: 0, bar: 1, baz: 2}
h1 = {bat: 3, bar: 4}
h2 = {bam: 5, bat:6}
h.merge(h1, h2) # => {:foo=>0, :bar=>4, :baz=>2, :bat=>6, :bam=>5}


(*)=> hash.merge(*other_hashes) { |key, old_value, new_value| ... } → new_hash
With arguments and a block:
    Returns a new Hash object that is the merge of self and each given hash.
    The given hashes are merged left to right.
    Each new-key entry is added at the end.
    For each duplicate key:
        Calls the block with the key and the old and new values.
        The block’s return value becomes the new value for the entry. 

h = {foo: 0, bar: 1, baz: 2}
h1 = {bat: 3, bar: 4}
h2 = {bam: 5, bat:6}
h3 = h.merge(h1, h2) { |key, old_value, new_value| old_value + new_value }
h3 # => {:foo=>0, :bar=>5, :baz=>2, :bat=>9, :bam=>5}

With no arguments:
    Returns a copy of self.
    The block, if given, is ignored. 

(*)=> hash.merge → copy_of_self
h = {foo: 0, bar: 1, baz: 2}
h.merge # => {:foo=>0, :bar=>1, :baz=>2}
h1 = h.merge { |key, old_value, new_value| raise 'Cannot happen' }
h1 # => {:foo=>0, :bar=>1, :baz=>2}
	
_____________________________________________________________________

    merge!, update: Merges each given hash into self.

inplace version  of merge.	
_____________________________________________________________________

    replace: Replaces the entire contents of self with the contents of a given hash. 

h = {foo: 0, bar: 1, baz: 2}
h.replace({bat: 3, bam: 4}) # => {:bat=>3, :bam=>4}
_____________________________________________________________________

########## Methods for Deleting ###########

~~~~~~~~These methods remove entries from self:~~~~~~~~~~~

    clear: Removes all entries from self.
    
h	# => {:bat=>3, :bam=>4} 
h.clear	# => {} 
h	# => {} 
_____________________________________________________________________

    compact!: Removes all nil-valued entries from self.

h = {foo: 0, bar: nil, baz: 2, bat: nil}
h.compact! # => {:foo=>0, :baz=>2}

h = {foo: 0, bar: nil, baz: 2, bat: nil, nil: 5}	# => {:foo=>0, :bar=>nil, :baz=>2, :bat=>nil, :nil=>5} 
h.compact!		# => {:foo=>0, :baz=>2, :nil=>5} 
h			# => {:foo=>0, :baz=>2, :nil=>5} 

_____________________________________________________________________

    delete: Removes the entry for a given key.

(*)=> hash.delete(key) → value or nil

If no block is given and key is found, deletes the entry and returns the associated value:
h = {foo: 0, bar: 1, baz: 2}
h.delete(:bar) # => 1
h # => {:foo=>0, :baz=>2}

If no block given and key is not found, returns nil.


(*)=> hash.delete(key) {|key| ... } → object

If a block is given and key is found, ignores the block, deletes the entry, and returns the associated value:
h = {foo: 0, bar: 1, baz: 2}
h.delete(:baz) { |key| raise 'Will never happen'} # => 2
h # => {:foo=>0, :bar=>1}

If a block is given and key is not found, calls the block and returns the block’s return value:
h = {foo: 0, bar: 1, baz: 2}
h.delete(:nosuch) { |key| "Key #{key} not found" } # => "Key nosuch not found"
h # => {:foo=>0, :bar=>1, :baz=>2}
_____________________________________________________________________

    delete_if: Removes entries selected by a given block.

(*)=> hash.delete_if {|key, value| ... } → self
h = {foo: 0, bar: 1, baz: 2}
h.delete_if {|key, value| value > 0 } # => {:foo=>0}
h	# => {:foo=>0} 

(*)=> hash.delete_if → new_enumerator
h = {foo: 0, bar: 1, baz: 2}
e = h.delete_if # => #<Enumerator: {:foo=>0, :bar=>1, :baz=>2}:delete_if>
_____________________________________________________________________

    filter!, select!: Keep only those entries selected by a given block.
(Hash#filter! is an alias for Hash#select!.)

(*)=> hash.select! {|key, value| ... } → self or nil
h = {foo: 0, bar: 1, baz: 2}
h.select! {|key, value| value < 2 }  => {:foo=>0, :bar=>1}

(*)=> hash.select! → new_enumerator
h = {foo: 0, bar: 1, baz: 2}
e = h.select!  # => #<Enumerator: {:foo=>0, :bar=>1, :baz=>2}:select!>
_____________________________________________________________________

    keep_if: Keep only those entries selected by a given block.

(*)=> hash.keep_if {|key, value| ... } → self
h = {foo: 0, bar: 1, baz: 2}
h.keep_if { |key, value| key.start_with?('b') } # => {:bar=>1, :baz=>2}

(*)=> hash.keep_if → new_enumerator
h = {foo: 0, bar: 1, baz: 2}
e = h.keep_if # => #<Enumerator: {:foo=>0, :bar=>1, :baz=>2}:keep_if>
_____________________________________________________________________

    reject!: Removes entries selected by a given block.

(*)=> hash.reject! {|key, value| ... } → self or nil
h = {foo: 0, bar: 1, baz: 2}
h.reject! {|key, value| value < 2 } # => {:baz=>2}

(*)=> hash.reject! → new_enumerator
h = {foo: 0, bar: 1, baz: 2}
e = h.reject! # => #<Enumerator: {:foo=>0, :bar=>1, :baz=>2}:reject!>
_____________________________________________________________________

    shift: Removes and returns the first entry. 

h = {foo: 0, bar: 1, baz: 2}
h.shift # => [:foo, 0]
h # => {:bar=>1, :baz=>2}

Returns nil if the hash is empty.
_____________________________________________________________________


~~~~~~~~These methods return a copy of self with some entries removed:~~~~~~~~~~

    compact: Returns a copy of self with all nil-valued entries removed.

h = {foo: 0, bar: nil, baz: 2, bat: nil}
h1 = h.compact
h1 # => {:foo=>0, :baz=>2}
_____________________________________________________________________

    except: Returns a copy of self with entries removed for specified keys.

h = { a: 100, b: 200, c: 300 }
h.except(:a)          #=> {:b=>200, :c=>300}

Any given keys that are not found are ignored.
_____________________________________________________________________

    filter, select: Returns a copy of self with only those entries selected by a given block.
h = {foo: 0, bar: 1, baz: 2}
h.select {|key, value| value < 2 } # => {:foo=>0, :bar=>1}
_____________________________________________________________________

    reject: Returns a copy of self with entries removed as specified by a given block.

h = {foo: 0, bar: 1, baz: 2}
h1 = h.reject {|key, value| key.start_with?('b') }
h1 # => {:foo=>0}
_____________________________________________________________________

    slice: Returns a hash containing the entries for given keys. 

Returns a new Hash object containing the entries for the given keys:

h = {foo: 0, bar: 1, baz: 2}
h.slice(:baz, :foo) # => {:baz=>2, :foo=>0}

Any given keys that are not found are ignored.
_____________________________________________________________________

##########  ###########
