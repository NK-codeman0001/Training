Time
A Time object represents a date and time:

Time.new(2000, 1, 1, 0, 0, 0) # => 2000-01-01 00:00:00 -0600

t = Time.new(-2000, 1, 1, 0, 0, 0.0)
# => -2000-01-01 00:00:00 -0600
t.year # => -2000
t.month # => 1
t.mday # => 1
t.hour # => 0
t.min # => 0
t.sec # => 0
t.subsec # => 0

t = Time.new(2000, 12, 31, 23, 59, 59.5)
# => 2000-12-31 23:59:59.5 -0600
t.year # => 2000
t.month # => 12
t.mday # => 31
t.hour # => 23
t.min # => 59
t.sec # => 59
t.subsec # => (1/2)

_____________________________________________________________________________________

########## [] ###########
++++++++++++++ Epoch Seconds  ++++++++++++
Epoch seconds is the exact number of seconds (including fractional subseconds) since the Unix Epoch, January 1, 1970.

++++++++++++++ Creating a New Time Instance   ++++++++++++
Time.new(2002)         #=> 2002-01-01 00:00:00 -0500
Time.new(2002, 10)     #=> 2002-10-01 00:00:00 -0500
Time.new(2002, 10, 31) #=> 2002-10-31 00:00:00 -0500

++++++++++++++  Working with an Instance of Time  ++++++++++++
t = Time.new(1993, 02, 24, 12, 0, 0, "+09:00")

Was that a monday?
t.monday? #=> false

What year was that again?
t.year #=> 1993

Was it daylight savings at the time?
t.dst? #=> false

What’s the day a year later?
t + (60*60*24*365) #=> 1994-02-24 12:00:00 +0900

How many seconds was that since the Unix Epoch?
t.to_i #=> 730522800

You can also do standard functions like compare two times.
t1 = Time.new(2010)
t2 = Time.new(2011)

t1 == t2 #=> false
t1 == t1 #=> true
t1 <  t2 #=> true
t1 >  t2 #=> false

Time.new(2010,10,31).between?(t1, t2) #=> true
_____________________________________________________________________________________

########## Methods for Creating ###########

    ::new: Returns a new time from specified arguments (year, month, etc.), including an optional timezone value.

++++++++++++++ new(year = (now = true), mon = (str = year; nil), mday = nil, hour = nil, min = nil, sec = nil, zone = nil, in: nil, precision: 9) ++++++++++++++

With no positional arguments, returns the value of Time.now:
Time.new	# => 2023-03-10 10:44:57.022430558 +0530 
Time.now	# => 2023-03-10 10:44:57.451556353 +0530


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Time.new(2000, 1, 2, 3, 4, 5) # => 2000-01-02 03:04:05 -0600

For the positional arguments (other than zone):

    year: Year, with no range limits:
    Time.new(999999999)  # => 999999999-01-01 00:00:00 -0600
    Time.new(-999999999) # => -999999999-01-01 00:00:00 -0600

    month: Month in range (1..12), or case-insensitive 3-letter month name:
    Time.new(2000, 1)     # => 2000-01-01 00:00:00 -0600
    Time.new(2000, 12)    # => 2000-12-01 00:00:00 -0600
    Time.new(2000, 'jan') # => 2000-01-01 00:00:00 -0600
    Time.new(2000, 'JAN') # => 2000-01-01 00:00:00 -0600

    mday: Month day in range(1..31):
    Time.new(2000, 1, 1)  # => 2000-01-01 00:00:00 -0600
    Time.new(2000, 1, 31) # => 2000-01-31 00:00:00 -0600

    hour: Hour in range (0..23), or 24 if min, sec, and usec are zero:
    Time.new(2000, 1, 1, 0)  # => 2000-01-01 00:00:00 -0600
    Time.new(2000, 1, 1, 23) # => 2000-01-01 23:00:00 -0600
    Time.new(2000, 1, 1, 24) # => 2000-01-02 00:00:00 -0600

    min: Minute in range (0..59):
    Time.new(2000, 1, 1, 0, 0)  # => 2000-01-01 00:00:00 -0600
    Time.new(2000, 1, 1, 0, 59) # => 2000-01-01 00:59:00 -0600

    sec: Second in range (0…61):
    Time.new(2000, 1, 1, 0, 0, 0)  # => 2000-01-01 00:00:00 -0600
    Time.new(2000, 1, 1, 0, 0, 59) # => 2000-01-01 00:00:59 -0600
    Time.new(2000, 1, 1, 0, 0, 60) # => 2000-01-01 00:01:00 -0600

    sec may be Float or Rational.
    Time.new(2000, 1, 1, 0, 0, 59.5)  # => 2000-12-31 23:59:59.5 +0900
    Time.new(2000, 1, 1, 0, 0, 59.7r) # => 2000-12-31 23:59:59.7 +0900


++++++++++++++ parse(date, now=self.now) { |year| ... } ++++++++++++++

require 'time'
Time.parse("2010-10-31") #=> 2010-10-31 00:

require 'time'
# assuming the current date is "2011-10-31"
Time.parse("12:00") #=> 2011-10-31 12:00:00 -0500

require 'time'
Time.parse("01-10-31") {|year| year + (year < 70 ? 2000 : 1900)}
#=> 2001-10-31 00:00:00 -0500
Time.parse("70-10-31") {|year| year + (year < 70 ? 2000 : 1900)}
#=> 1970-10-31 00:00:00 -0500

require 'time'
# Suppose it is "Thu Nov 29 14:33:20 2001" now and
# your time zone is EST which is GMT-5.
now = Time.parse("Thu Nov 29 14:33:20 2001")
Time.parse("16:30", now)     #=> 2001-11-29 16:30:00 -0500
Time.parse("7/23", now)      #=> 2001-07-23 00:00:00 -0500
Time.parse("Aug 31", now)    #=> 2001-08-31 00:00:00 -0500
Time.parse("Aug 2000", now)  #=> 2000-08-01 00:00:00 -0500

_____________________________________________________________________________________

    ::local (aliased as ::mktime): Same as ::new, except the timezone is the local timezone.


++++++++++++++ local(year, month = 1, mday = 1, hour = 0, min = 0, sec = 0, usec = 0) → new_time
local(sec, min, hour, mday, month, year, dummy, dummy, dummy, dummy) → new_time ++++++++++++++

# With seven arguments.
Time.local(0, 1, 2, 3, 4, 5, 6)
# => 0000-01-02 03:04:05.000006 -0600
# With exactly ten arguments.
Time.local(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
# => 0005-04-03 02:01:00 -0600
_____________________________________________________________________________________

    ::utc (aliased as ::gm): Same as ::new, except the timezone is UTC.
Time.utc(sec, min, hour, mday, month, year, dummy, dummy, dummy, dummy)
where the dummy arguments are ignored:

a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
# => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
Time.utc(*a) # => 0005-04-03 02:01:00 UTC

_____________________________________________________________________________________

    ::at: Returns a new time based on seconds since epoch.
    
t = Time.new(2000, 12, 31, 23, 59, 59) # => 2000-12-31 23:59:59 -0600
secs = t.to_i                          # => 978328799
Time.at(secs)                          # => 2000-12-31 23:59:59 -0600
Time.at(secs + 0.5)                    # => 2000-12-31 23:59:59.5 -0600
Time.at(1000000000)                    # => 2001-09-08 20:46:40 -0500
Time.at(0)                             # => 1969-12-31 18:00:00 -0600
Time.at(-1000000000)                   # => 1938-04-24 17:13:20 -0500

_____________________________________________________________________________________

    ::now: Returns a new time based on the current system time.
Time.now               # => 2009-06-24 12:39:54 +0900
_____________________________________________________________________________________

    + (plus): Returns a new time increased by the given number of seconds.
t = Time.new(2000) # => 2000-01-01 00:00:00 -0600
t + (60 * 60 * 24) # => 2000-01-02 00:00:00 -0600
t + 0.5            # => 2000-01-01 00:00:00.5 -0600
_____________________________________________________________________________________

    - (minus): Returns a new time decreased by the given number of seconds.
t = Time.new(2000) # => 2000-01-01 00:00:00 -0600
t - (60 * 60 * 24) # => 1999-12-31 00:00:00 -0600
t - 0.5            # => 1999-12-31 23:59:59.5 -0600
_____________________________________________________________________________________

########## Methods for Fetching ###########

    year: Returns the year of the time.

t = Time.new(2000, 1, 2, 3, 4, 5, 6)
# => 2000-01-02 03:04:05 +000006
t.year # => 2000
_____________________________________________________________________________________

    month (aliased as mon): Returns the month of the time.

t = Time.new(2000, 1, 2, 3, 4, 5, 6)
# => 2000-01-02 03:04:05 +000006
t.mon # => 1
_____________________________________________________________________________________

    mday (aliased as day): Returns the day of the month.

t = Time.new(2000, 1, 2, 3, 4, 5, 6)
# => 2000-01-02 03:04:05 +000006
t.mday # => 2
_____________________________________________________________________________________

    hour: Returns the hours value for the time.

t = Time.new(2000, 1, 2, 3, 4, 5, 6)
# => 2000-01-02 03:04:05 +000006
t.hour # => 3
_____________________________________________________________________________________

    min: Returns the minutes value for the time.

t = Time.new(2000, 1, 2, 3, 4, 5, 6)
# => 2000-01-02 03:04:05 +000006
t.min # => 4
_____________________________________________________________________________________

    sec: Returns the seconds value for the time.

t = Time.new(2000, 1, 2, 3, 4, 5, 6)
# => 2000-01-02 03:04:05 +000006
t.sec # => 5
_____________________________________________________________________________________

    usec (aliased as tv_usec): Returns the number of microseconds in the subseconds value of the time.

t = Time.now # => 2022-07-11 14:59:47.5484697 -0500
t.usec       # => 548469
_____________________________________________________________________________________

    nsec (aliased as tv_nsec): Returns the number of nanoseconds in the subsecond part of the time.

t = Time.now # => 2022-07-11 15:04:53.3219637 -0500
t.nsec       # => 321963700
_____________________________________________________________________________________

    subsec: Returns the subseconds value for the time.

t = Time.now # => 2022-07-11 15:11:36.8490302 -0500
t.subsec     # => (4245151/5000000)

t = Time.new(2000, 1, 1, 2, 3, 4) # => 2000-01-01 02:03:04 -0600
t.subsec                          # => 0
_____________________________________________________________________________________

    wday: Returns the integer weekday value of the time (0 == Sunday).

t = Time.new(2000, 1, 2, 3, 4, 5, 6)
# => 2000-01-02 03:04:05 +000006
t.wday    # => 0
t.sunday? # => true
_____________________________________________________________________________________

    yday: Returns the integer yearday value of the time (1 == January 1).

Time.new(2000, 1, 1).yday   # => 1
Time.new(2000, 12, 31).yday # => 366
_____________________________________________________________________________________

    hash: Returns the integer hash value for the time.

t = Time.new(2000, 1, 2, 3, 4, 5, 6)
# => 2000-01-02 03:04:05 +000006

t.hash
# => 4151201290736758367 
_____________________________________________________________________________________

    utc_offset (aliased as gmt_offset and gmtoff): Returns the offset in seconds between time and UTC.

Time.utc(2000, 1, 1).utc_offset   # => 0
Time.local(2000, 1, 1).utc_offset # => -21600 # -6*3600, or minus six hours.

_____________________________________________________________________________________

    to_f: Returns the float number of seconds since epoch for the time.

Time.utc(1970, 1, 1, 0, 0, 0).to_f         # => 0.0
Time.utc(1970, 1, 1, 0, 0, 0, 999999).to_f # => 0.999999
Time.utc(1950, 1, 1, 0, 0, 0).to_f         # => -631152000.0
Time.utc(1990, 1, 1, 0, 0, 0).to_f         # => 631152000.0

_____________________________________________________________________________________

    to_i (aliased as tv_sec): Returns the integer number of seconds since epoch for the time.

Time.utc(1970, 1, 1, 0, 0, 0).to_i         # => 0
Time.utc(1970, 1, 1, 0, 0, 0, 999999).to_i # => 0
Time.utc(1950, 1, 1, 0, 0, 0).to_i         # => -631152000
Time.utc(1990, 1, 1, 0, 0, 0).to_i         # => 631152000
_____________________________________________________________________________________

    to_r: Returns the Rational number of seconds since epoch for the time.
Time.now.to_r # => (419607138387104207/250000000) 
_____________________________________________________________________________________

    zone: Returns a string representation of the timezone of the time.

Time.utc(2000, 1, 1).zone # => "UTC"
Time.new(2000, 1, 1).zone # => "Central Standard Time"
_____________________________________________________________________________________

########## Methods for Querying ###########


    utc? (aliased as gmt?): Returns whether the time is UTC.

now = Time.now
# => 2022-08-18 10:24:13.5398485 -0500
now.utc? # => false
utc = Time.utc(2000, 1, 1, 20, 15, 1)
# => 2000-01-01 20:15:01 UTC
utc.utc? # => true
_____________________________________________________________________________________

    dst? (aliased as isdst): Returns whether the time is DST (daylight saving time).

t = Time.local(2000, 1, 1) # => 2000-01-01 00:00:00 -0600
t.zone                     # => "Central Standard Time"
t.dst?                     # => false
t = Time.local(2000, 7, 1) # => 2000-07-01 00:00:00 -0500
t.zone                     # => "Central Daylight Time"
t.dst?                     # => true
_____________________________________________________________________________________

    sunday?: Returns whether the time is a Sunday.
    monday?: Returns whether the time is a Monday.
    tuesday?: Returns whether the time is a Tuesday.
    wednesday?: Returns whether the time is a Wednesday.
    thursday?: Returns whether the time is a Thursday.
    friday?: Returns whether time is a Friday.
    saturday?: Returns whether the time is a Saturday.

t = Time.utc(2000, 1, 1) # => 2000-01-01 00:00:00 UTC
t.saturday?              # => true

_____________________________________________________________________________________

########## Methods for Comparing ###########

    <=>: Compares self to another time.

t = Time.now     # => 2007-11-19 08:12:12 -0600
t2 = t + 2592000 # => 2007-12-19 08:12:12 -0600
t <=> t2         # => -1
t2 <=> t         # => 1

t = Time.now     # => 2007-11-19 08:13:38 -0600
t2 = t + 0.1     # => 2007-11-19 08:13:38 -0600
t.nsec           # => 98222999
t2.nsec          # => 198222999
t <=> t2         # => -1
t2 <=> t         # => 1
t <=> t          # => 0
_____________________________________________________________________________________

    eql?: Returns whether the time is equal to another time.

t.eql?t		# => true 
t.eql?t2	# => false 
t.eql?t3	# => false 
t2.eql?t3	# => false
_____________________________________________________________________________________

########## Methods for Converting ###########

    asctime (aliased as ctime): Returns the time as a string.

t = Time.new(2000, 12, 31, 23, 59, 59, 0.5)
t.ctime                      # => "Sun Dec 31 23:59:59 2000"
_____________________________________________________________________________________

    inspect: Returns the time in detail as a string.

t.inspect                    # => "2000-12-31 23:59:59.5 +000001"
_____________________________________________________________________________________

    to_s: Returns a string representation of the time.

t.to_s                       # => "2000-12-31 23:59:59 +0000"
_____________________________________________________________________________________

    strftime: Returns the time as a string, according to a given format.

t.strftime('%a %b %e %T %Y') # => "Sun Dec 31 23:59:59 2000"
t.strftime('%c')             # => "Sun Dec 31 23:59:59 2000"
_____________________________________________________________________________________

    to_a: Returns a 10-element array of values from the time.
    
Time.utc(2000, 1, 1).to_a
# => [0,   0,   0,    1,   1,   2000, 6,    1,    false, "UTC"]
#    [sec, min, hour, day, mon, year, wday, yday, dst?,   zone]
_____________________________________________________________________________________

    getutc (aliased as getgm): Returns a new time converted to UTC.

local = Time.local(2000) # => 2000-01-01 00:00:00 -0600
local.utc?               # => false
utc = local.getutc       # => 2000-01-01 06:00:00 UTC
utc.utc?                 # => true
utc == local             # => true
_____________________________________________________________________________________

    getlocal: Returns a new time converted to local time.
t = Time.utc(2000)                    # => 2000-01-01 00:00:00 UTC
t.getlocal                            # => 1999-12-31 18:00:00 -0600
t.getlocal('+12:00')                  # => 2000-01-01 12:00:00 +1200
_____________________________________________________________________________________

    utc (aliased as gmtime): Converts time to UTC in place.

t = Time.new(2000) # => 2000-01-01 00:00:00 -0600
t.utc?             # => false
t.utc              # => 2000-01-01 06:00:00 UTC
t.utc?             # => true
_____________________________________________________________________________________

    localtime: Converts time to local time in place.

t = Time.utc(2000, 1, 1, 20, 15, 1) # => 2000-01-01 20:15:01 UTC
t.localtime                         # => 2000-01-01 14:15:01 -0600
_____________________________________________________________________________________

    deconstruct_keys: Returns a hash of time components used in pattern-matching.

Possible keys are: :year, :month, :day, :yday, :wday, :hour, :min, :sec, :subsec, :dst, :zone.

Possible usages:

t = Time.utc(2022, 10, 5, 21, 25, 30)

if t in wday: 3, day: ..7  # uses deconstruct_keys underneath
  puts "first Wednesday of the month"
end
#=> prints "first Wednesday of the month"

case t
in year: ...2022
  puts "too old"
in month: ..9
  puts "quarter 1-3"
in wday: 1..5, month:
  puts "working day in month #{month}"
end
#=> prints "working day in month 10"

Note that deconstruction by pattern can also be combined with class check:

if t in Time(wday: 3, day: ..7)
  puts "first Wednesday of the month"
end
_____________________________________________________________________________________

########## Methods for Rounding ###########

    round:Returns a new time with subseconds rounded.
    
t = Time.utc(2010, 3, 30, 5, 43, 25.123456789r)

t          # => 2010-03-30 05:43:25.123456789 UTC
t.round    # => 2010-03-30 05:43:25 UTC
t.round(0) # => 2010-03-30 05:43:25 UTC
t.round(1) # => 2010-03-30 05:43:25.1 UTC
t.round(2) # => 2010-03-30 05:43:25.12 UTC
t.round(3) # => 2010-03-30 05:43:25.123 UTC
t.round(4) # => 2010-03-30 05:43:25.1235 UTC
t.round(5) # => 2010-03-30 05:43:25.12346 UTC 
t.round(6) # => 2010-03-30 05:43:25.123457 UTC 
t.round(7) # => 2010-03-30 05:43:25.1234568 UTC 
t.round(8) # => 2010-03-30 05:43:25.12345679 UTC 
t.round(9) # => 2010-03-30 05:43:25.123456789 UTC 
t.round(10)# => 2010-03-30 05:43:25.123456789 UTC 
_____________________________________________________________________________________

    ceil: Returns a new time with subseconds raised to a ceiling.
    
t = Time.utc(2010, 3, 30, 5, 43, 25.123456789r)
t          # => 2010-03-30 05:43:25.123456789 UTC
t.ceil     # => 2010-03-30 05:43:26 UTC
t.ceil(2)  # => 2010-03-30 05:43:25.13 UTC
t.ceil(4)  # => 2010-03-30 05:43:25.1235 UTC
t.ceil(6)  # => 2010-03-30 05:43:25.123457 UTC
t.ceil(8)  # => 2010-03-30 05:43:25.12345679 UTC
t.ceil(10) # => 2010-03-30 05:43:25.123456789 UTC
_____________________________________________________________________________________

    floor: Returns a new time with subseconds lowered to a floor.

t = Time.utc(2010, 3, 30, 5, 43, 25.123456789r)
t           # => 2010-03-30 05:43:25.123456789 UTC
t.floor     # => 2010-03-30 05:43:25 UTC
t.floor(2)  # => 2010-03-30 05:43:25.12 UTC
t.floor(4)  # => 2010-03-30 05:43:25.1234 UTC
t.floor(6)  # => 2010-03-30 05:43:25.123456 UTC
t.floor(8)  # => 2010-03-30 05:43:25.12345678 UTC
t.floor(10) # => 2010-03-30 05:43:25.123456789 UTC
_____________________________________________________________________________________

########## END ###########

