String Literals
Ruby strings are simply sequences of 8-bit bytes and they are objects of class String. Double-quoted strings allow substitution and backslash notation but single-quoted strings don't allow substitution and allow backslash notation only for \\ and \'

Example
puts 'escape using "\\"';
puts 'That\'s right';

This will produce the following result −
escape using "\"
That's right

You can substitute the value of any Ruby expression into a string using the sequence #{ expr }. Here, expr could be any ruby expression.

puts "Multiplication Value : #{24*60*60}";

This will produce the following result −
Multiplication Value : 86400

Backslash Notations
Following is the list of Backslash notations supported by Ruby −

(*) \n ::  Newline (0x0a)
(*) \r ::  Carriage return (0x0d)
(*) \f ::  Formfeed (0x0c)
(*) \b ::  Backspace (0x08)
(*) \a ::  Bell (0x07)
(*) \e ::  Escape (0x1b)
(*) \s ::  Space (0x20)
(*) \e ::  Escape (0x1b)
(*) \f ::  Formfeed (0x0c)
(*) \v ::  Vertical tab (0x0b)
(*) \t ::  Tab (0x09)
____________________________________________________________________________________________________
Expression Substitution

Expression substitution is a means of embedding the value of any Ruby expression into a string using #{ and }

x, y, z = 12, 36, 72
puts "The value of x is #{ x }."
puts "The sum of x and y is #{ x + y }."
puts "The average was #{ (x + y + z)/3 }."
This will produce the following result −
The value of x is 12.
The sum of x and y is 48.
The average was 40.

______________________________________________________________________________________________________
General Delimited Strings

With general delimited strings, you can create strings inside a pair of matching though arbitrary delimiter characters, e.g., !, (, {, <, etc., preceded by a percent character (%). Q, q, and x have special meanings. General delimited strings can be −
%{Ruby is fun.}  equivalent to "Ruby is fun."
%Q{ Ruby is fun. } equivalent to " Ruby is fun. "
%q[Ruby is fun.]  equivalent to a single-quoted string
%x!ls! equivalent to back tick command output `ls`

_______________________________________________________________________________________________________
String Built-in Methods

(1)=> new [String.new(str = "")]

(2)=> str % arg
Formats a string using a format specification. arg must be an array if it contains more than one substitution. For information on the format specification, see sprintf under "Kernel Module."

(3)=> str * integer
Returns a new string containing integer times str. In other words, str is repeated integer imes.

(4)=> str + other_str
Concatenates other_str to str.

(5)=> str << obj
Concatenates an object to str. If the object is a Fixnum in the range 0.255, it is converted to a character. Compare it with concat.

(6)=> str <=> other_str
Compares str with other_str, returning -1 (less than), 0 (equal), or 1 (greater than). The comparison is case-sensitive.

(7)=> str == obj
Tests str and obj for equality. If obj is not a String, returns false; returns true if str <=> obj returns 0.

**(8)=> str =~ obj**  (!important)
Matches str against a regular expression pattern obj. Returns the position where the match starts; otherwise, false.

(9)=> str.capitalize
Capitalizes a string.

(10)=> str.capitalize!
Same as capitalize, but changes are made in place.

(11)=> str.casecmp
Makes a case-insensitive comparison of strings.

(12)=> str.center
Centers a string.

(13)=> str.chomp
Removes the record separator ($/), usually \n, from the end of a string. If no record separator exists, does nothing.

(14)=> str.chomp!
Same as chomp, but changes are made in place.

(15)=> str.chop
Removes the last character in str.

(16)=> str.chop!
Same as chop, but changes are made in place.

(17)=> str.concat(other_str)
Concatenates other_str to str.

(18)=> str.count(str, ...)
Counts one or more sets of characters. If there is more than one set of characters, counts the intersection of those sets

(19)=> str.crypt(other_str)
Applies a one-way cryptographic hash to str. The argument is the salt string, **which should be two characters long, each character in the range a.z, A.Z, 0.9, . or /     .**

(20)=> str.delete(other_str, ...)
Returns a copy of str with all characters in the intersection of its arguments deleted.

(21)=> str.delete!(other_str, ...)
Same as delete, but changes are made in place.

(22)=> str.downcase
Returns a copy of str with all uppercase letters replaced with lowercase.

(23)=> str.downcase!
Same as downcase, but changes are made in place.

(24)=> str.dump
Returns a version of str with all nonprinting characters replaced by \nnn notation and all special characters escaped.

(25)=> str.each(separator = $/) { |substr| block }
Splits str using argument as the record separator ($/ by default), passing each substring to the supplied block.

(26)=> str.each_byte { |fixnum| block }
Passes each byte from str to the block, returning each byte as a decimal representation of the byte.

(28)=> str.each_line(separator=$/) { |substr| block }
Splits str using argument as the record separator ($/ by default), passing each substring to the supplied block.

(29)=> str.empty?
Returns true if str is empty (has a zero length).

(30)=> str.eql?(other)
Two strings are equal if they have the same length and content.

(31)=> str.gsub(pattern, replacement) [or]

(32)=> str.gsub(pattern) { |match| block }
Returns a copy of str with all occurrences of pattern replaced with either replacement or the value of the block. The pattern will typically be a Regexp; if it is a String then no regular expression metacharacters will be interpreted (that is, /\d/ will match a digit, but '\d' will match a backslash followed by a 'd')

(34)=> str.gsub!(pattern, replacement) [or] str.gsub!(pattern) { |match|block }
Performs the substitutions of String#gsub in place, returning str, or nil if no substitutions were performed.

(35)=> str.hash
Returns a hash based on the string's length and content.

(36)=> str.hex
Treats leading characters from str as a string of hexadecimal digits (with an optional sign and an optional 0x) and returns the corresponding number. Zero is returned on error.

(37)=> str.include? other_str [or] str.include? fixnum
Returns true if str contains the given string or character.

(38)=> str.index(substring ,offset) [or]
str.index(regexp , offset)
Returns the index of the first occurrence of the given substring, character (fixnum), or pattern (regexp) in str. Returns nil if not found. If the second parameter is present, it specifies the position in the string to begin the search.

(39)=> str.insert(index, other_str)
Inserts other_str before the character at the given index, modifying str. Negative indices count from the end of the string, and insert after the given character. The intent is to insert a string so that it starts at the given index.

(40)=> str.inspect
Returns a printable version of str, with special characters escaped.

(41)=> str.intern [or] str.to_sym
Returns the Symbol corresponding to str, creating the symbol if it did not previously exist.

(42)=> str.length
Returns the length of str. Compare size.

(43)=> str.ljust(integer, padstr = ' ')
If integer is greater than the length of str, returns a new String of length integer with str left-justified and padded with padstr; otherwise, returns str.

(44)=> str.lstrip
Returns a copy of str with leading whitespace removed.

(45)=> str.lstrip!
Removes leading whitespace from str, returning nil if no change was made.

**(46)=> str.match(pattern)** (important)
Converts pattern to a Regexp (if it isn't already one), then invokes its match method on str.

(47)=> str.oct
Treats leading characters of str as a string of octal digits (with an optional sign) and returns the corresponding number. Returns 0 if the conversion fails.

(48)=> str.replace(other_str)
Replaces the contents and taintedness of str with the corresponding values in other_str.

(49)=> str.reverse
Returns a new string with the characters from str in reverse order.

(50)=> str.reverse!
Reverses str in place.

(51)=> str.rindex(substring , fixnum) [or]
(52)=> str.rindex(regexp , fixnum)
Returns the index of the last occurrence of the given substring, character (fixnum), or pattern (regexp) in str. Returns nil if not found. If the second parameter is present, it specifies the position in the string to end the search.characters beyond this point won't be considered.
.
(53)=> str.rjust(integer, padstr = ' ')
If integer is greater than the length of str, returns a new String of length integer with str right-justified and padded with padstr; otherwise, returns str.

(54)=> str.rstrip  //remove strip
Returns a copy of str with trailing whitespace removed.

(55)=> str.rstrip!
Removes trailing whitespace from str, returning nil if no change was made.

**(56)=> str.scan(pattern) [or]** (!important)
(57)=> str.scan(pattern) { |match, ...| block }
Both forms iterate through str, matching the pattern (which may be a Regexp or a String). For each match, a result is generated and either added to the result array or passed to the block. If the pattern contains no groups, each individual result consists of the matched string, $&.

(58)=> str.slice(range) [or] 
(59)=> str.slice(regexp) [or]
(60)=> str.slice(other_str)
(61)=> str.slice!(range) [or] str.slice!(regexp) [or]
str.slice!(other_str)
Deletes the specified portion from str, and returns the portion deleted. The forms that take a Fixnum will raise an IndexError if the value is out of range; the Range form will raise a RangeError, and the Regexp and String forms will silently ignore the assignment.

(62)=> str.split(pattern = $, [limit])
Divides str into substrings based on a delimiter, returning an array of these substrings.
If pattern is a String, then its contents are used as the delimiter when splitting str. If pattern is a single space, str is split on whitespace, with leading whitespace and runs of contiguous whitespace characters ignored.
If pattern is a Regexp, str is divided where the pattern matches. Whenever the pattern matches a zero-length string, str is split into individual characters.
If pattern is omitted, the value of $; is used. If $; is nil (which is the default), str is split on whitespace as if ` ` were specified.
If the limit parameter is omitted, trailing null fields are suppressed. If limit is a positive number, at most that number of fields will be returned (if limit is 1, the entire string is returned as the only entry in an array). If negative, there is no limit to the number of fields returned, and trailing null fields are not suppressed.

(63)=> str.squeeze([other_str]*)
Builds a set of characters from the other_str parameter(s) using the procedure described for String#count. Returns a new string where runs of the same character that occur in this set are replaced by a single character. If no arguments are given, all runs of identical characters are replaced by a single character.

(64)=> str.squeeze!([other_str]*)
Squeezes str in place, returning either str, or nil if no changes were made.

(65)=> str.strip
Returns a copy of str with leading and trailing whitespace removed.

(66)=> str.strip!
Removes leading and trailing whitespace from str. Returns nil if str was not altered.

**(67)=> str.sub(pattern, replacement) [or]** (!important)
(68)=> str.sub(pattern) { |match| block }
Returns a copy of str with the first occurrence of pattern replaced with either replacement or the value of the block. The pattern will typically be a Regexp; if it is a String then no regular expression metacharacters will be interpreted.

(68)=> str.sub!(pattern, replacement) [or]
str.sub!(pattern) { |match| block }
Performs the substitutions of String#sub in place, returning str, or nil if no substitutions were performed.

**(69)=> str.succ [or] str.next** (!important)
Returns the successor to str.

(70)=> str.succ! [or] str.next!
Equivalent to String#succ, but modifies the receiver in place.

(71)=> str.sum(n = 16)  //checksum
Returns a basic n-bit checksum of the characters in str, where n is the optional Fixnum parameter, defaulting to 16. The result is simply the sum of the binary value of each character in str modulo 2n - 1. This is not a particularly good checksum.

(72)=> str.swapcase
Returns a copy of str with uppercase alphabetic characters converted to lowercase and lowercase characters converted to uppercase.

(73)=> str.swapcase!
Equivalent to String#swapcase, but modifies the receiver in place, returning str, or nil if no changes were made.

(74)=> str.to_f
>Returns the result of interpreting leading characters in str as a floating-point number. Extraneous characters past the end of a valid number are ignored. If there is not a valid number at the start of str, 0.0 is returned. This method never raises an exception.

(75)=> str.to_i(base = 10)
Returns the result of interpreting leading characters in str as an integer base (base 2, 8, 10, or 16). Extraneous characters past the end of a valid number are ignored. If there is not a valid number at the start of str, 0 is returned. This method never raises an exception.

(76)=> str.to_s [or] str.to_str
Returns the receiver.

**(77)=> str.tr(from_str, to_str)** (!important)
Returns a copy of str with the characters in from_str replaced by the corresponding characters in to_str. If to_str is shorter than from_str, it is padded with its last character. Both strings may use the c1.c2 notation to denote ranges of characters, and from_str may start with a ^, which denotes all characters except those listed.

(78)=> str.tr!(from_str, to_str)
Translates str in place, using the same rules as String#tr. Returns str, or nil if no changes were made.

**(79)=> str.tr_s(from_str, to_str)** (!important)
Processes a copy of str as described under String#tr, then removes duplicate characters in regions that were affected by the translation.

(80)=> str.tr_s!(from_str, to_str)

(81)=> str.upcase
Returns a copy of str with all lowercase letters replaced with their uppercase counterparts. The operation is locale insensitive. Only characters a to z are affected.

(82)=> str.upcase!
Changes the contents of str to uppercase, returning nil if no changes are made.

**(83)=> str.upto(other_str) { |s| block }** (!important)
Iterates through successive values, starting at str and ending at other_str inclusive, passing each value in turn to the block. The String#succ method is used to generate each value.

(84)=> unpack 
Try the following example to unpack various data.
"abc \0\0abc \0\0".unpack('A6Z6')   #=> ["abc", "abc "]
"abc \0\0".unpack('a3a3')           #=> ["abc", " \000\000"]
"abc \0abc \0".unpack('Z*Z*')       #=> ["abc ", "abc "]
"aa".unpack('b8B8')                 #=> ["10000110", "01100001"]
"aaa".unpack('h2H2c')               #=> ["16", "61", 97]
"\xfe\xff\xfe\xff".unpack('sS')     #=> [-2, 65534]
"now = 20is".unpack('M*')           #=> ["now is"]
"whole".unpack('xax2aX2aX1aX2a')    #=> ["h", "e", "l", "l", "o"]
